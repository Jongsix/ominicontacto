[fts-agentes]
exten => _XXXX,1,Verbose(2, llamada para un agente)
same => n,Set(DB(PAUSECUSTOM/AGENT/${EXTEN})=RINGING:${EPOCH})
same => n,Dial(SIP/${EXTEN},,tTcM(queuedial-agent-answer^${EXTEN}))
same => n,Set(DB(PAUSECUSTOM/AGENT/${EXTEN})=READY:${EPOCH})
same => n,Hangup()

exten => *098,1,Verbose(hold the line)
same => n,Answer()
same => n,MusicOnHold(default,1200)
same => n,Hangup()

;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS     LLAMADAS SALIENTES DESDE PHONEJS & CLICK2CALL   FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS

[macro-dialout-trunk-predial-hook]
exten => s,1,Verbose(2, Dialplan de OML - Dialplan de OML)
same => n,Verbose(2, Se comrpueba si la llamada saliente se debe procesar por OML Dialplan)
; se comprueba si la llamada fue originada desde PhoneJS
same => n,GotoIf($["${SIP_HEADER(Nomcamp)}" != ""]?omlphonejscall) 
same => n,Verbose(2, No viene de PhoneJS, se comrpueba si es CLICK2CALL)
; Se debe comrpobar si la llamada es originada desde algun click2call
same => n,GotoIf($["${origin}" == "contactos" | "${origin}" == "agendas" | "${origin}" == "click2call" | "${origin}" == "calificaciones" | "${origin}" == "preview"]?${origin})
; Si ${origin} no contiene ningun valor entonces la llamada no es click2call
same => n,Verbose(2, Tampoco es una llamada de click2call)
same => n,Verbose(2, Compruebo si se trata de una llamada de WD)
; Compruebo si es una llamada de WD para antes de enviarla a FreePBX para discar, comprobar si el num no esta en blacklist o ya fue discado desde OML
same => n,GotoIf($[${WOMBAT_HOPPER_ID} != ""]?wdcall,s,1)
same => n(omlcallok),MacroExit()
same => n(omlphonejscall),Verbose(2, la llamada manual viene de PhoneJS)
same => n,Verbose(2, PhoneJS SIP Headers - IDCamp:${SIP_HEADER(Idcamp)} - NomCamp:${SIP_HEADER(Nomcamp)} - TipoLL: ${SIP_HEADER(Tipocamp)})
same => n,Set(QDIALER_AGENT=${CALLERID(name)})
same => n,Set(QDIALER_QUEUE=${SIP_HEADER(Nomcamp)})
same => n,Set(__TIPOLLAMADA=MANUALCALL)
same => n,Set(__CODCLI=${SIP_HEADER(Codcli)})
same => n,Set(__IDCampManualCall=${SIP_HEADER(Idcamp)})
same => n,Set(__IDTIPOLLAMADAMANUAL=${SIP_HEADER(Tipocamp)})
same => n,Set(CDR(oml1)=${IDCampManualCall})
same => n,Set(CDR(oml2)=saliente)
same => n,Set(CDR(oml3)=${IDTIPOLLAMADAMANUAL})
same => n,Goto(omlcall)
; Dependiendo el tipo de click2call, se preparan algunas variables y se continua 
same => n(contactos),Verbose(2, llamada desde click2call contactos de campa침a)
same => n,Set(QDIALER_AGENT=${CALLERID(name)})
same => n,Set(QDIALER_QUEUE=${IdCamp}_${CAMPANA})
same => n,Set(__IDTIPOLLAMADAMANUAL=${Tipocamp})
same => n,Set(__TIPOLLAMADA=CONTACTOS)
same => n,Set(__CODCLI=${codCli})
same => n,Set(__IDCampManualCall=${IdCamp})
same => n,Goto(omlcall)
same => n(preview),Verbose(2, llamada desde click2call campa침a preview)
same => n,Set(QDIALER_AGENT=${CALLERID(name)})
same => n,Set(QDIALER_QUEUE=${IdCamp}_${CAMPANA})
same => n,Set(__IDTIPOLLAMADAMANUAL=${Tipocamp})
same => n,Set(__TIPOLLAMADA=PREVIEW)
same => n,Set(__CODCLI=${codCli})
same => n,Set(__IDCampManualCall=${IdCamp})
same => n,Set(CDR(oml1)=${IDCampManualCall})
same => n,Set(CDR(oml2)=preview)
;same => n,Set(CDR(oml3)=${IDTIPOLLAMADAMANUAL})
same => n,Goto(omlcall)
same => n(agendas),Verbose(2, llamada desde click2call de agenda personal)
same => n,Set(QDIALER_AGENT=${CALLERID(name)})
same => n,Set(QDIALER_QUEUE=${IdCamp}_${CAMPANA})
same => n,Set(__IDTIPOLLAMADAMANUAL=${Tipocamp})
same => n,Set(__TIPOLLAMADA=AGENDAPERSONAL)
same => n,Set(__CODCLI=${codCli})
same => n,Set(__IDCampManualCall=${IdCamp})
same => n,Set(CDR(oml1)=${IDCampManualCall})
same => n,Set(CDR(oml2)=saliente)
same => n,Set(CDR(oml3)=${IDTIPOLLAMADAMANUAL})
same => n(calificaciones),Verbose(2, llamada desde click2call calificaciones)
same => n,Set(QDIALER_AGENT=${CALLERID(name)})
same => n,Set(QDIALER_QUEUE=${IdCamp}_${CAMPANA})
same => n,Set(__IDTIPOLLAMADAMANUAL=${Tipocamp})
same => n,Set(__TIPOLLAMADA=CALIFICACIONES)
same => n,Set(__CODCLI=${codCli})
same => n,Set(__IDCampManualCall=${IdCamp})
same => n,Set(CDR(oml1)=${IDCampManualCall})
same => n,Set(CDR(oml2)=saliente)
same => n,Set(CDR(oml3)=${IDTIPOLLAMADAMANUAL})
same => n,Goto(omlcall)
; la llamada fue originada desde OML, a continuaci칩n se verifica si fue desde PhoneJS, click2call 칩 click2callPreview
; preparo las variables de canal para avanzar sobre los tipicos dialplans de omnileadsdialplan_oubound_freepbx 
same => n(omlcall),Verbose(2, La llamada se sigue procesando por Omnileads Dialplan)
same => n,Verbose(2, se comprueba si el numero discado esta en blacklist )
same => n,AGI(omni-blacklist.php,${EXTEN})
same => n,Verbose(2, resultado del blacklist: ${BLACKLIST})
same => n,GotoIf($["${BLACKLIST}" == "0"]?:blacklist,1)
; el numero no esta en blacklist, se sigue con el discado, ya sea PhoneJS, click2call o click2callPreview
same => n,GotoIf($["${QDIALER_AGENT}" != ""]?queuecheck)
same => n,Noop(NO AGENT?, exit normally with no tracking outbound)
same => n,MacroExit()
same => n(queuecheck),GotoIf($["${QDIALER_QUEUE}" != ""]?goqueuedial)
same => n,Noop(NO QUEUE, exit normally with no tracking outbound)
same => n,MacroExit()
same => n(goqueuedial),Set(PREDIAL_HOOK_RET=BYPASS)
same => n,Set(CHANNEL(hangup_handler_push)=canal-llamado,s,1)
same => n,Set(DIAL_PREFIX=${DB(dialprefix/${QDIALER_QUEUE})})
same => n,Verbose(2, Trunk is ${OUT_${DIAL_TRUNK}})
same => n,Verbose(2, Dialout number is ${OUTNUM})
same => n,Verbose(2, Dial options are ${DIAL_TRUNK_OPTIONS})
same => n,Set(PREDIAL_HOOK_RET=BYPASS)
same => n,Goto(queuedial,${DIAL_PREFIX}${OUTNUM},1)
same => n,MacroExit()


; llamada origina por WD, verifico si es blacklist/oml dialednum o debe escapar y seguir por FreePBX
[wdcall]
exten => s,1,Verbose(2, La llamada WD debe ser controlada por las reglas de incidencia antes de mandarla a freepbx para discar)
same => n,Verbose(2, se comprueba si el numero discado esta en blacklist )
same => n,AGI(omni-blacklist.php,${OUTNUM})
same => n,Verbose(2, resultado del blacklist: ${BLACKLIST})
same => n,GotoIf($["${BLACKLIST}" == "0"]?:falseanswer,1)
same => n,Verbose(2, se comprueba si el numero discado no fue contactado por OML previamente)
same => n,AGI(omni-dialednum.php,${OUTNUM},${ID_CAMPANA})
same => n,Verbose(2, resultado del oml dialednum: ${OMLDIALEDNUM})
same => n,GotoIf($["${OMLDIALEDNUM}" == "0"]?:falseanswer,1)
same => n,GotoIf($["${PREDIAL_HOOK_RET}" = "BYPASS"]?bypass,1)
same => n,ExecIf($["${DB(AMPUSER/${AMPUSER}/cidname)}" != ""]?Set(CONNECTEDLINE(num,i)=${DIAL_NUMBER}))
same => n,ExecIf($[$["${DB(AMPUSER/${AMPUSER}/cidname)}" != ""] & $["${CALLERID(name)}"!="hidden"]]?Set(CONNECTEDLINE(name,i)=CID:${CALLERID(number)}))
same => n,ExecIf($[$["${DB(AMPUSER/${AMPUSER}/cidname)}" != ""] & $["${CALLERID(name)}"="hidden"]]?Set(CONNECTEDLINE(name,i)=CID:(Hidden)${CALLERID(number)}))
same => n,GotoIf($["${custom}" = "AMP"]?customtrunk)
same => n,DumpChan
same => n,Set(CDR(oml1)=${ID_CAMPANA})
same => n,Set(CDR(oml2)=dialer)
;same => n,Set(CDR(oml3)=${IDTIPOLLAMADAMANUAL})
same => n,Dial(${OUT_${DIAL_TRUNK}}/${OUTNUM}${OUT_${DIAL_TRUNK}_SUFFIX},${TRUNK_RING_TIMER},${DIAL_TRUNK_OPTIONS})
same => n,Hangup()

exten => falseanswer,1,Verbose(2, no tengo que llamar, pero debo meter un callstatus a WD)
same => n,Answer()

exten => blacklist,1,NoOp(se trata de un blacklist num)
same => n,Hangup()


[queuedial]
; this piece of dialplan is just a calling hook into the [qlog-queuedial] context that actually does the
; outbound dialing - replace as needed - just fill in the same variables.
exten => _X.,1,Verbose(2, QDIALER_QUEUE ${QDIALER_QUEUE})
same => n,Verbose(2, QDIALER_AGENT ${QDIALER_AGENT})
;same => n,Set(__RECMANUALCALL=${QDIALER_QUEUE}-${UNIQUEID}.wav)
same => n,Set(CALLERID(name)=${QDIALER_QUEUE})
same => n,Set(QDIALER_CHANNEL=${OUT_${DIAL_TRUNK}}/${EXTEN})
same => n,Set(MIXAG=${REPLACE(QDIALER_AGENT, ,_)})
same => n,Set(MIXAG=${REPLACE(QDIALER_AGENT,"'",)})
same => n,Set(MIXQ=${REPLACE(QDIALER_QUEUE, ,_)})
same => n,Set(MIXDEST=${EXTEN})
same => n,Set(__CALLFILENAME=out-${STRFTIME(${EPOCH},,%Y%m%d%H%M%S)}-${IDCampManualCall}-${CALLERID(num)}-${MIXDEST}-${UNIQUEID}.wav)
;same => n,MixMonitor(${CALLFILENAME},b,/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${CALLFILENAME})
same => n,Set(QueueName=${QDIALER_QUEUE})
same => n,Gosub(find-route-number,${EXTEN},1)
same => n,Goto(qlog-queuedial,${EXTEN},1)

[qlog-queuedial]
; We use a global variable to pass values back from the answer-detect macro.
; STATUS = U unanswered
;        = A answered    (plus CAUSECOMPLETE=C when callee hung up)
; The 'g' dial parameter must be used in order to track callee disconnecting.
; Note that we'll be using the 'h' hook in any case to do the logging when channels go down.
;
exten => _X.,1,NoOp(Outbound call -> A:${QDIALER_AGENT} N:${EXTEN} Q:${QDIALER_QUEUE} Ch:${QDIALER_CHANNEL})
same => n,Set(OUTBOUND_GROUP=OUT_${DIAL_TRUNK})
same => n,GotoIf($["${OUTMAXCHANS_${DIAL_TRUNK}}foo" = "foo"]?nomax)
same => n,GotoIf($[ ${GROUP_COUNT(OUT_${DIAL_TRUNK})} >= ${OUTMAXCHANS_${DIAL_TRUNK}} ]?chanfull)
same => n(nomax),GotoIf($["${INTRACOMPANYROUTE}" = "YES"]?skipoutcid)
same => n,Set(DIAL_TRUNK_OPTIONS=${TRUNK_OPTIONS})
same => n,Macro(outbound-callerid,${DIAL_TRUNK})
same => n(skipoutcid),GosubIf($["${PREFIX_TRUNK_${DIAL_TRUNK}}" != ""]?sub-flp-${DIAL_TRUNK},s,1)
same => n,Set(OUTNUM=${OUTPREFIX_${DIAL_TRUNK}}${DIAL_NUMBER})
same => n,Set(custom=${CUT(OUT_${DIAL_TRUNK},:,1)})
same => n,ExecIf($[$["${MOHCLASS}" != "default"] & $["${MOHCLASS}" != ""]]?Set(DIAL_TRUNK_OPTIONS=M(setmusic^${MOHCLASS})${DIAL_TRUNK_OPTIONS}))

same => n,Set(ST=${EPOCH})
same => n,Set(GM=${REPLACE(QDIALER_AGENT, ,_)})
same => n,Set(GLOBAL(${GM})=U)
same => n,Set(GLOBAL(${GM}ans)=0)
same => n,Macro(queuelog,${ST},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},ENTERQUEUE,-,${EXTEN},-,${IDTIPOLLAMADAMANUAL})

same => n,GotoIf($["${custom}" = "AMP"]?customtrunk)
same => n,Set(DB(PAUSECUSTOM/AGENT/${CALLERID(num)})=RINGING:${EPOCH})
same => n,Dial(${QDIALER_CHANNEL},300,gM(queuedial-answer^${UNIQUEID}^${GM}^${QDIALER_QUEUE}^${QDIALER_AGENT}^${ST}^${IDTIPOLLAMADAMANUAL})${DIAL_TRUNK_OPTIONS})
same => n,Set(CAUSECOMPLETE=${IF($["${DIALSTATUS}" = "ANSWER"]?C)})
same => n,Goto(enddial)

same => n(customtrunk),Set(pre_num=${CUT(OUT_${DIAL_TRUNK},$,1)})
same => n,Set(the_num=${CUT(OUT_${DIAL_TRUNK},$,2)})
same => n,Set(post_num=${CUT(OUT_${DIAL_TRUNK},$,3)})
same => n,GotoIf($["${the_num}" = "OUTNUM"]?outnum:skipoutnum)
same => n(outnum),Set(the_num=${OUTNUM})
same => n(skipoutnum),Dial(${pre_num:4}${the_num}${post_num},300,${DIAL_TRUNK_OPTIONS})
same => n,Goto(enddial)

same => n(chanfull),Noop(max channels used up)
same => n(enddial),Noop(End first dial)

same => n,GotoIf($["${CAUSECOMPLETE}" = "C"]?callok)
same => n,GotoIf($["${FAILOVERTRUNKS}" = ""]?callok)

; Do a failover loop
same => n,Noop(Failed trunk call)
same => n,Set(WT=$[${EPOCH} - ${ST}])
same => n,Macro(queuelog,${EPOCH},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},OUTFAIL,1,1,${WT},${IDTIPOLLAMADAMANUAL})
same => n,Set(i=1)
same => n,While($[${i}<=${FIELDQTY(FAILOVERTRUNKS,\,)}])
same => n,Set(DIAL_TRUNK=${CUT(FAILOVERTRUNKS,\,,${i})})
same => n,Set(QDIALER_CHANNEL=${OUT_${DIAL_TRUNK}}/${EXTEN})
same => n,Noop(The new qdialer channel is ${QDIALER_CHANNEL})

same => n,Set(OUTBOUND_GROUP=OUT_${DIAL_TRUNK})
same => n,GotoIf($["${OUTMAXCHANS_${DIAL_TRUNK}}foo" = "foo"]?nomaxloop)
same => n,GotoIf($[ ${GROUP_COUNT(OUT_${DIAL_TRUNK})} >= ${OUTMAXCHANS_${DIAL_TRUNK}} ]?chanfullloop)
same => n(nomaxloop),GotoIf($["${INTRACOMPANYROUTE}" = "YES"]?skipoutcidloop)
same => n,Set(DIAL_TRUNK_OPTIONS=${TRUNK_OPTIONS})
same => n,Macro(outbound-callerid,${DIAL_TRUNK})
same => n(skipoutcidloop),GosubIf($["${PREFIX_TRUNK_${DIAL_TRUNK}}" != ""]?sub-flp-${DIAL_TRUNK},s,1)
same => n,Set(OUTNUM=${OUTPREFIX_${DIAL_TRUNK}}${DIAL_NUMBER})
same => n,Set(custom=${CUT(OUT_${DIAL_TRUNK},:,1)})
same => n,ExecIf($[$["${MOHCLASS}" != "default"] & $["${MOHCLASS}" != ""]]?Set(DIAL_TRUNK_OPTIONS=M(setmusic^${MOHCLASS})${DIAL_TRUNK_OPTIONS}))

same => n,GotoIf($["${custom}" = "AMP"]?customtrunkloop)
same => n,Set(DB(PAUSECUSTOM/AGENT/${CALLERID(num)})=Ringing:${EPOCH})
same => n,Dial(${QDIALER_CHANNEL},300,gM(queuedial-answer^${UNIQUEID}^${GM}^${QDIALER_QUEUE}^${QDIALER_AGENT}^${ST}^${IDTIPOLLAMADAMANUAL})${DIAL_TRUNK_OPTIONS})
same => n,Set(CAUSECOMPLETE=${IF($["${DIALSTATUS}" = "ANSWER"]?C)})
same => n,Goto(enddialloop)

same => n(customtrunkloop),Set(pre_num=${CUT(OUT_${DIAL_TRUNK},$,1)})
same => n,Set(the_num=${CUT(OUT_${DIAL_TRUNK},$,2)})
same => n,Set(post_num=${CUT(OUT_${DIAL_TRUNK},$,3)})
same => n,GotoIf($["${the_num}" = "OUTNUM"]?outnumloop:skipoutnumloop)
same => n(outnumloop),Set(the_num=${OUTNUM})
same => n(skipoutnumloop),Dial(${pre_num:4}${the_num}${post_num},300,${DIAL_TRUNK_OPTIONS})
same => n,Goto(enddialloop)

same => n(chanfullloop),Noop(max channels used up in failover loop)
same => n(enddialloop),Set(CAUSECOMPLETE=${IF($["${DIALSTATUS}" = "ANSWER"]?C)})
same => n,GotoIf($["${CAUSECOMPLETE}" = "C"]?callok)

same => n,Set(i=$[${i}+1])
same => n,EndWhile

same => n(callok),Noop(Call completed ok, or end failover loop)


; Trapping call termination here
exten => h,1,NoOp( "Call exiting: status ${GLOBAL(${GM})} answered at: ${GLOBAL(${GM}ans)} DS: ${DIALSTATUS}"  )
exten => h,n,Set(DB(PAUSECUSTOM/AGENT/${FROMEXTEN})=Ready:${EPOCH})
exten => h,n,Set(DB(LASTDIAL/${QDIALER_AGENT})=${EPOCH})
exten => h,n,Goto(case-${GLOBAL(${GM})})
exten => h,n,Hangup()

; Call unanswered, last attempt
exten => h,n(case-U),Set(WT=$[${EPOCH} - ${ST}])
exten => h,n,Set(DB(PAUSECUSTOM/AGENT/${FROMEXTEN})=Ready:${EPOCH})
exten => h,n,Macro(queuelog,${EPOCH},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},ABANDON,1,1,${WT},${IDTIPOLLAMADAMANUAL})
exten => h,n,Hangup()

; call answered: agent/callee hung
exten => h,n(case-A),Set(COMPLETE=${IF($["${CAUSECOMPLETE}" = "C"]?COMPLETECALLER:COMPLETEAGENT)})
exten => h,n,Set(WT=$[${GLOBAL(${GM}ans)} - ${ST}])
exten => h,n,Set(CT=$[${EPOCH} - ${GLOBAL(${GM}ans)}])

;exten => h,n,Macro(queuelog,${EPOCH},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},${COMPLETE},${WT},${CT},-,${IDTIPOLLAMADAMANUAL})
exten => h,n,Macro(queuelog,${EPOCH},${UNIQUEID},${QDIALER_QUEUE},${QDIALER_AGENT},COMPLETECALL,${WT},${CT},-,${IDTIPOLLAMADAMANUAL})
exten => h,n,UserEvent(AgentComplete,Queue: ${QDIALER_QUEUE},TalkTime: ${CT},Channel: ${CHANNEL})
exten => h,n,Hangup()


[macro-queuedial-answer]
; Expecting $ARG1: uniqueid of the caller channel
;           $ARG2: global variable to store the answer results
;           $ARG3: queue name
;           $ARG4: agent name
;           $ARG5: enterqueue
;
exten => s,1,Verbose(2, "Macro: queuedial-answer UNIQUEID:${ARG1} GR:${ARG2} Q:${ARG3} A:${ARG4} E:${ARG5}")
exten => s,n,Set(QDIALER_QUEUE=${ARG3})
same => n,Set(DB(PAUSECUSTOM/AGENT/${FROMEXTEN})=On Call:${EPOCH})
;exten => s,n,MixMonitor(out-${QDIALER_QUEUE}-${ARG1}.wav,b,/usr/local/parselog/update_mix_mixmonitor.pl ${ARG1} out-${QDIALER_QUEUE}-${ARG1}.wav)
same => n,MixMonitor(${CALLFILENAME},b,/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${CALLFILENAME})
exten => s,n,Set(AUDIOHOOK_INHERIT(MixMonitor)=yes)
exten => s,n,Set(NOW=${EPOCH})
exten => s,n,Set(WD=$[${NOW} - ${ARG5}])
exten => s,n,Macro(queuelog,${NOW},${ARG1},${ARG3},${ARG4},CONNECT,${WD},-,-,${ARG6},${ARG7})
exten => s,n,Set(GLOBAL(${ARG2})=A)
exten => s,n,Set(GLOBAL(${ARG2}ans)=${NOW})
exten => s,n,Verbose(2, "Macro queuedial-answer terminating" )

[macro-queuedial-agent-answer]
exten => s,1,Verbose(2, "Macro: queuedial-answer UNIQUEID:${ARG1} GR:${ARG2} Q:${ARG3} A:${ARG4} E:${ARG5}")
same => n,Set(DB(PAUSECUSTOM/AGENT/${ARG1})=On Call:${EPOCH})
same => n,Verbose(2, "Macro queuedial-answer terminating" )

[macro-queuelog]
; The advantage of using this macro is that you can choose whether to use the Shell version
; (where you have complete control of what gets written) or the Application version (where you
; do not need a shellout, so it's way faster).
;
; Expecting  $ARG1: Timestamp
;            $ARG2: Call-id
;            $ARG3: Queue
;            $ARG4: Agent
;            $ARG5: Verb
;            $ARG6: Param1
;            $ARG7: Param2
;            $ARG8: Param3
;	     $ARG9: Tipo de llamada
;
;exten => s,1,System( echo "${ARG1},${ARG2},${ARG3,${ARG4},${ARG5},${ARG6},${ARG7},${ARG8}" >> /var/log/asterisk/queue_log )
; queuedial-answer^${UNIQUEID}^${GM}^${QDIALER_QUEUE}^${QDIALER_AGENT}^${ST}^${SIP_HEADER(Tipocamp)}

exten => s,1,GotoIf($["${TIPOLLAMADA}" == "PREVIEW"]?prev,1)
same => n,QueueLog(${ARG3},${ARG2},${ARG4},${ARG5},${ARG6}|${ARG7}|${ARG8}|saliente|${ARG9})

exten => prev,1,Verbose(2, queuelog para camp prev)
same => n,QueueLog(${ARG3},${ARG2},${ARG4},${ARG5},${ARG6}|${ARG7}|${ARG8}|preview|${ARG9})

#exec /usr/bin/php /usr/local/parselog/generate_outbound_route_context.php

[click2call]
exten => _XXXX,1,NoOp(llamada de click2call)
same => n,GotoIf($["${click2callPreview}" == "true"]?preview)
same => n,SIPAddHeader(Origin:CLICK2CALL)
same => n(preview),SIPAddHeader(Origin:CLICK2CALLPREVIEW)
same => n,SIPAddHeader(IDCliente:${codCli})
same => n,SIPAddHeader(IDCamp:${IdCamp})
same => n,Dial(SIP/${EXTEN},15,tT)
same => n,Hangup()

;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS     GRABACIONES AL CRM EXTERNO      FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS 
;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS

[hangup-fts]
exten => llamante_handler,1,NoOp(Llamante_Handler)
same => n,Set(CHANNEL(hangup_handler_push)=canal-llamante,s,1); 
same => n,NoOp(Cliente: ${FROMEXTEN} - Agente: ${DIALEDPEERNUMBER} - Grab: ${CALLFILENAME})
same => n,Return

exten => llamado_handler,1,NoOp(Llamado_Handler)
same => n,Set(CHANNEL(hangup_handler_push)=canal-llamado,s,1); 
same => n,NoOp(Cliente: ${FROMEXTEN} - Agente: ${DIALEDPEERNUMBER} - Grab: ${CALLFILENAME})
same => n,Return

[canal-llamante]
exten => s,1,NoOp(hangup canal llamante tipo de llamada ------> ENTRANTE)
same => n,NoOp(hangup canal llamante tipo de llamada ------> ENTRANTE)
same => n,NoOp(hangup canal llamante tipo de llamada ------> ENTRANTE)
same => n,GotoIf($["${TIPOLLAMADA}" == "IN"]?entrante)
same => n,Hangup()
same => n(entrante),NoOp(GRA: ${CUT(MONITOR_FILENAME,/,6)} - AG:${CUT(CUT(BRIDGEPEER,/,2),-,1)} - CLI:${CALLERID(num)} - DNI:${CUT(FROMEXTEN,-,3)} - Camp: ${SIPADDHEADER03:7})
same => n,AGI(omni-grabaciones.php,3,${DNI},${CALLERID(num)},${MEMBERINTERFACE:4},${CUT(MONITOR_FILENAME,/,6)}.wav,${SIPADDHEADER03:7},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)})
same => n,System(/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${MONITOR_FILENAME}.wav)
same => n,Hangup()

; por el canal llamado saco info de las llamadas para insertar grabaciones en OML
; el tipo de llamada MANUALCALL no tiene informaci칩n del IDCliente
[canal-llamado]
exten => s,1,NoOp(hangup canal llamado tipo de llamada ------> DIALER o MANUALCALL)
same => n,DumpChan
same => n,GotoIf($["${TIPOLLAMADA}" == "MANUALCALL"]?manual)
same => n,GotoIf($["${TIPOLLAMADA}" == "AGENDAPERSONAL"]?click2call)
same => n,GotoIf($["${TIPOLLAMADA}" == "CONTACTOS"]?click2call)
same => n,GotoIf($["${TIPOLLAMADA}" == "CALIFICACIONES"]?click2call)
same => n,GotoIf($["${TIPOLLAMADA}" == "DIALER"]?dialer)
same => n,GotoIf($["${TIPOLLAMADA}" == "PREVIEW"]?preview)
same => n,GotoIf($["${TIPOLLAMADA}" == "IN"]?inbound)
same => n,Hangup()
; tratamiento de llamadas dialer
same => n(dialer),NoOp(GRA:${MONITOR_FILENAME}.wav - CLI:${NUMMARCADO} - AG:${MEMBERINTERFACE:4} - CODCLI:${ID_CLIENTE} - )
same => n,GotoIf($["${ABANDONED}" == "TRUE"]?dialerqueuelogNoAttend:dialerqueuelogAttend)
same => n(dialerqueuelogNoAttend),Set(QUEUECALLRESULT=${IF($["${ABANDONED}" = "TRUE"]?ABANDON:${QUEUECALLRESULT})})
same => n,Set(QUEUECALLRESULT=${IF($["${QUEUESTATUS}" = "TIMEOUT"]?EXITWITHTIMEOUT:${QUEUECALLRESULT})})
same => n,QueueLog(${QUEUENAME},${CHANNEL(LinkedID)},NONE,${QUEUECALLRESULT},${QEHOLDTIME}|||${TIPOLLAMADA}|2)
same => n,Goto(dialeragigrabaciones)
same => n(dialerqueuelogAttend),QueueLog(${QUEUENAME},${CHANNEL(LinkedID)},${MEMBERNAME},COMPLETECALL,${QEHOLDTIME}|||${TIPOLLAMADA}|2)
same => n,Set(DB(PAUSECUSTOM/AGENT/${MEMBERINTERFACE:4})=Ready:${EPOCH})
same => n(dialeragigrabaciones),AGI(omni-grabaciones.php,3,${ID_CLIENTE},${CALLERID(num)},${MEMBERINTERFACE:4},${MONITOR_FILENAME:28}.${MONITORFORMAT},${SIPADDHEADER04:7},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)},${UNIQUEID})
same => n,AGI(omni-grabaciones.php,2,${ID_CLIENTE},${NUMMARCADO},${MEMBERINTERFACE:4},${MONITOR_FILENAME}.${MONITORFORMAT},${ID_CAMPANA},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)},${UNIQUEID})
same => n,System(/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${MONITOR_FILENAME}.wav)
same => n,Hangup()
; tratamiento de llamadas inbound
same => n(inbound),NoOp(GRA:${MONITOR_FILENAME}.wav - CLI:${NUMMARCADO} - AG:${MEMBERINTERFACE:4} - CODCLI:${ID_CLIENTE} - )
same => n,GotoIf($["${ABANDONED}" == "TRUE"]?inqueuelogNoAttend:inqueuelogAttend)
same => n(inqueuelogNoAttend),Set(QUEUECALLRESULT=${IF($["${ABANDONED}" = "TRUE"]?ABANDON:${QUEUECALLRESULT})})
same => n,Set(QUEUECALLRESULT=${IF($["${QUEUESTATUS}" = "TIMEOUT"]?EXITWITHTIMEOUT:${QUEUECALLRESULT})})
same => n,QueueLog(${QUEUENAME},${CHANNEL(LinkedID)},NONE,${QUEUECALLRESULT},${QEHOLDTIME}|||${TIPOLLAMADA}|1)
same => n,Goto(inagigrabaciones)
same => n(inqueuelogAttend),QueueLog(${QUEUENAME},${CHANNEL(LinkedID)},${MEMBERNAME},COMPLETECALL,${QEHOLDTIME}|||${TIPOLLAMADA}|1)
same => n(inagigrabaciones),AGI(omni-grabaciones.php,3,${ID_CLIENTE},${CALLERID(num)},${MEMBERINTERFACE:4},${MONITOR_FILENAME:28}.${MONITORFORMAT},${SIPADDHEADER04:7},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)},${UNIQUEID})
same => n,System(/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${MONITOR_FILENAME:28}.wav)
same => n,Set(DB(PAUSECUSTOM/AGENT/${MEMBERINTERFACE:4})=Ready:${EPOCH})
same => n,Hangup()
; tratamiento de llamadas preview
same => n(preview),NoOp(GRAPREV:${CALLFILENAME} - CLI:${CUT(DIALEDPEERNUMBER,/,2)} - AG:SIP/${FROMEXTEN} - CODCLI:${CODCLI})
same => n,NoOp(Estado del canal: ${CHANNEL(State)})
same => n,GotoIf($["${CHANNEL(State)}" == "Up"]?atendioPrev)
same => n,Hangup()
same => n(atendioPrev),AGI(omni-grabaciones.php,5,${codCli},${CUT(DIALEDPEERNUMBER,/,2)},${FROMEXTEN},${CUT(CALLFILENAME,wav,1)}${MONITORFORMAT},${IdCamp},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)},${UNIQUEID})
same => n,System(/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${MONITOR_FILENAME}.wav)
same => n,Hangup()
; tratamiento de llamadas click2call
same => n(click2call),NoOp(GRA:${CALLFILENAME} - CLI:${CUT(DIALEDPEERNUMBER,/,2)} - AG:SIP/${FROMEXTEN} - CODCLI:${CODCLI})
same => n,NoOp(Resultado llamada: ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?atendioClick2call)
same => n,Hangup()
same => n(atendioClick2call),AGI(omni-grabaciones.php,4,${codCli},${CUT(DIALEDPEERNUMBER,/,2)},${FROMEXTEN},${CUT(CALLFILENAME,wav,1)}${MONITORFORMAT},${IDCampManualCall},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)},${UNIQUEID})
same => n,System(/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${CALLFILENAME})
same => n,Hangup()
; las llamadas manuales desde el PhoneJS no tienen info del "id de cliente". Por lo tanto no se pueden enviar al AGI de grabaciones 
same => n(manual),NoOp(GRA:${CALLFILENAME} - CLI:${CUT(DIALEDPEERNUMBER,/,2)} - AG:SIP/${FROMEXTEN} - CODCLI:${CODCLI})
same => n,NoOp(Estado del canal: ${CHANNEL(State)})
same => n,GotoIf($["${CHANNEL(State)}" == "Up"]?atendioManual)
same => n,Hangup()
same => n(atendioManual),AGI(omni-grabaciones.php,4,${DNI},${CUT(DIALEDPEERNUMBER,/,2)},${FROMEXTEN},${CUT(CALLFILENAME,wav,1)}${MONITORFORMAT},${IDCampManualCall},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)},${UNIQUEID})
same => n,System(/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${CALLFILENAME})
same => n,Hangup()


[queuelogSub]
exten => s,1,Verbose(2, voy a queueloguear que se atendio una llamada)
same => n,Set(IDTIPOLLAMADA=${IF($["${TIPOLLAMADA}" = "IN"]?1:2)})
same => n,QueueLog(${QUEUENAME},${CHANNEL(LinkedID)},${MEMBERNAME},CONNECT,${QEHOLDTIME}|${UNIQUEID}||${TIPOLLAMADA}|${IDTIPOLLAMADA})
same => n,Set(DB(PAUSECUSTOM/AGENT/${MEMBERINTERFACE:4})=On Call:${EPOCH})
same => n,Return()


[callstatusSub]
; comprobacion de blacklist
exten => s,1,Verbose(2, comprobacion de blacklist)
same => n,AGI(omni-blacklist.php,${WOMBAT_DIALING_NUMBER})
same => n,Verbose(2, resultado del blacklist: ${BLACKLIST})
same => n,GotoIf($["${BLACKLIST}" == "0"]?nexttest)
same => n,UserEvent(CALLSTATUS,Uniqueid:${UNIQUEID},V:BLACKLIST)
same => n,Hangup()
; comprobacion de oml call
same => n(nexttest),Verbose(2, comprobacion de OML Dialednum)
same => n,AGI(omni-dialednum.php,${WOMBAT_DIALING_NUMBER},${ID_CAMPANA})
same => n,Verbose(2, resultado del oml dialednum: ${OMLDIALEDNUM})
same => n,GotoIf($["${OMLDIALEDNUM}" == "0"]?return)
same => n,UserEvent(CALLSTATUS,Uniqueid:${UNIQUEID},V:OMLDIALEDNUM)
same => n,Hangup()
same => n(return),Return()

;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS     MANEJO DE LOGIN/LOGOFF Y PAUSAS     FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
[remove-add]
exten => s,1,NoOp(flag de sesion)
same => n,Set(FLAGREMOVE=true)
same => n,Return()

[fts-pausas]
; Login
exten => 0077LOGIN,1,Verbose(2,Login de agente)
same => n,Set(MemberChannel=${CHANNEL(peername)})
same => n,Set(MemberChanType=${CHANNEL(channeltype)})
same => n,Set(AGENTNAME=${REPLACE(CALLERID(name),"'",)})
same => n,Set(DB(PAUSECUSTOM/AGENT/${CALLERID(num)})=Ready:${EPOCH})
; logoff siempre por defecto
same => n,Set(ODBC_ID=${OMNILEADS_LOGIN_LOGOUT(${CALLERID(num)})})
same => n,Set(RESULTREMOVE=NULL)
same => n,GotoIf($[${ODBCROWS} < 1]?no_rows,1)
same => n,Set(COUNTER=1)
same => n,While($[${COUNTER} <= ${ODBCROWS}])
same => n,Set(ARRAY(PENALTY,QUEUENAME)=${ODBC_FETCH(${ODBC_ID})})
same => n,NoOp(${QUEUENAME})
same => n,NoOp(${PENALTY})
same => n,RemoveQueueMember(${QUEUENAME},${MemberChanType}/${MemberChannel})
same => n,Set(COUNTER=${INC(COUNTER)})
same => n,NoOp(resultado: ${RQMSTATUS})
same => n,ExecIf($["${RQMSTATUS}" == "REMOVED"]?Gosub(remove-add,s,1))
same => n,EndWhile()
same => n,ODBCFinish()
same => n,GotoIf($["${FLAGREMOVE}" != "true"]?noQueuelog)
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},REMOVEMEMBER)
; comienza login
same => n(noQueuelog),Set(ODBC_ID=${OMNILEADS_LOGIN_LOGOUT(${CALLERID(num)})})
same => n,GotoIf($[${ODBCROWS} < 1]?no_rows,1)
same => n,Set(COUNTER=1)
same => n,While($[${COUNTER} <= ${ODBCROWS}])
same => n,Set(ARRAY(PENALTY,QUEUENAME)=${ODBC_FETCH(${ODBC_ID})})
same => n,NoOp(${QUEUENAME})
same => n,NoOp(${PENALTY})
same => n,AddQueueMember(${QUEUENAME},${MemberChanType}/${MemberChannel},${PENALTY},,${AGENTNAME})
same => n,Set(COUNTER=${INC(COUNTER)})
same => n,EndWhile()
same => n,ODBCFinish()
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},ADDMEMBER)
same => n,Playback(silence/1&oml/agente-ok)
same => n,Hangup()

exten => no_rows,1,Verbose(1,No rows returned)
same => n,Playback(silence/1&oml/agente-ok-no-campaign)
same => n,Hangup()

; Logoff
exten => 0077LOGOUT,1,Verbose(2,Logging out of multiple queues)
;same => n,DBDel(PAUSECUSTOM/AGENT/${CALLERID(num)})
;same => n,DBDel(fop2state/SIP/${CALLERID(num)})
same => n,Set(MemberChannel=${CHANNEL(peername)})
same => n,Set(MemberChanType=${CHANNEL(channeltype)})
;same => n,UnPauseQueueMember(,${MemberChanType}/${MemberChannel})
same => n,NoOp(pausa: ${DB(PAUSECUSTOM/AGENT/${CALLERID(num)})})
same => n,GotoIf($["${ISNULL(${DB(PAUSECUSTOM/AGENT/${CALLERID(num)})})}]?seguir)
same => n,Verbose(2,Agent Unpaused antes de logoff)
same => n,DBDel(PAUSECUSTOM/AGENT/${CALLERID(num)})
same => n,DBDel(fop2state/SIP/${CALLERID(num)})
same => n,UserEvent(FOP2ASTDB,Family: fop2state,Channel: SIP/${CALLERID(num)},Value: )
same => n,Set(AGENTNAME=${REPLACE(CALLERID(name),"'",)})
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},UNPAUSEALL)
same => n(seguir),Set(AGENTNAME=${REPLACE(CALLERID(name),"'",)})
same => n,Set(ODBC_ID=${OMNILEADS_LOGIN_LOGOUT(${CALLERID(num)})})
same => n,GotoIf($[${ODBCROWS} < 1]?no_rows,1)
same => n,Set(COUNTER=1)
same => n,While($[${COUNTER} <= ${ODBCROWS}])
same => n,Set(ARRAY(PENALTY,QUEUENAME)=${ODBC_FETCH(${ODBC_ID})})
same => n,NoOp(${QUEUENAME})
same => n,NoOp(${PENALTY})
same => n,RemoveQueueMember(${QUEUENAME},${MemberChanType}/${MemberChannel})
same => n,Set(COUNTER=${INC(COUNTER)})
same => n,EndWhile()
same => n,ODBCFinish()
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},REMOVEMEMBER)
same => n,Playback(silence/1&agent-loggedoff)
same => n,Hangup()

exten => 066LOGOUT,1,Verbose(2,logout desde originate)
same => n,Set(MemberChannel=${AGENTE})
same => n,Set(MemberChanType=SIP)
same => n,Set(AGENTNAME=${AGENTNAME})
same => n,NoOP(${AUTOLOGOUT})
same => n,GotoIf($["${AUTOLOGOUT}" == ""]?noauto)
same => n,Set(AGENTE=${CUT(AUTOLOGOUT,-,1)})
same => n,Set(AGENTNAME=${CUT(AUTOLOGOUT,-,2)})
same => n,Set(MemberChannel=${AGENTE})
same => n(noauto),NoOp(pausa: ${DB(PAUSECUSTOM/AGENT/${AGENTE})})
same => n,GotoIf($["${DB(PAUSECUSTOM/AGENT/${AGENTE})}" != ' ']?:seguir)
same => n,Verbose(2,Agent Unpaused antes de logoff)
same => n,DBDel(PAUSECUSTOM/AGENT/${AGENTE})
same => n,UserEvent(FOP2ASTDB,Family: fop2state,Channel: SIP/${AGENTE},Value: )
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},UNPAUSEALL)
same => n(seguir),Set(AGENTNAME=${AGENTNAME})
same => n,Set(ODBC_ID=${OMNILEADS_LOGIN_LOGOUT(${AGENTE})})
same => n,GotoIf($[${ODBCROWS} < 1]?no_rows,1)
same => n,Set(COUNTER=1)
same => n,While($[${COUNTER} <= ${ODBCROWS}])
same => n,Set(ARRAY(PENALTY,QUEUENAME)=${ODBC_FETCH(${ODBC_ID})})
same => n,NoOp(${QUEUENAME})
same => n,NoOp(${PENALTY})
same => n,RemoveQueueMember(${QUEUENAME},${MemberChanType}/${MemberChannel})
same => n,Set(COUNTER=${INC(COUNTER)})
same => n,EndWhile()
same => n,ODBCFinish()
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},REMOVEMEMBER)
same => n,Playback(silence/1&agent-loggedoff)
same => n(bye),Hangup()

; Pausa
exten => _0077X,1,Verbose(2,Pausing member in all queues)
same => n,Set(MemberChannel=${CHANNEL(peername)})
same => n,Set(MemberChanType=${CHANNEL(channeltype)})
same => n,Set(PAUSENUM=${EXTEN:4})
same => n,GotoIf($["${EXTEN}" == "00770"]?ACW)
same => n,Set(PAUSETYPE=${PAUSA${EXTEN:4}})
same => n,Goto(setagentname)
same => n(ACW),Wait(1)
same => n,Set(PAUSETYPE=ACW)
same => n(setagentname),Set(AGENTNAME=${REPLACE(CALLERID(name),"'",)})
same => n,PauseQueueMember(,${MemberChanType}/${MemberChannel},,${EXTEN:4})
same => n,GotoIf($[${PQMSTATUS} = PAUSED]?agent_paused,1:agent_not_found,1)

exten => _0077XX,1,Verbose(2,Pausing member in all queues)
same => n,Set(MemberChannel=${CHANNEL(peername)})
same => n,Set(MemberChanType=${CHANNEL(channeltype)})
same => n,Set(PAUSENUM=${EXTEN:4})
same => n,GotoIf($["${EXTEN}" == "00770"]?ACW)
same => n,Set(PAUSENUM=${EXTEN:4})
same => n,Set(PAUSETYPE=${PAUSA${EXTEN:4}})
same => n,Goto(setagentname)
same => n(ACW),Wait(1)
same => n,Set(PAUSETYPE=ACW)
same => n(setagentname),Set(AGENTNAME=${REPLACE(CALLERID(name),"'",)})
same => n,PauseQueueMember(,${MemberChanType}/${MemberChannel},,${EXTEN:4})
same => n,GotoIf($[${PQMSTATUS} = PAUSED]?agent_paused,1:agent_not_found,1)

exten => agent_paused,1,Verbose(2,Agent paused successfully)
same => n,Set(DB(PAUSECUSTOM/AGENT/${CALLERID(num)})=${PAUSETYPE}:${EPOCH})
same => n,UserEvent(FOP2ASTDB,Family: fop2state,Channel: SIP/${CALLERID(num)},Value: ${PAUSETYPE})
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},PAUSEALL,${PAUSENUM})
same => n,Playback(silence/1&oml/agente-pausa)
same => n,Hangup()

; Salir de Pausa
exten => 0077UNPAUSE,1,Verbose(2,UnPausing member in all queues)
same => n,Set(MemberChannel=${CHANNEL(peername)})
same => n,Set(MemberChanType=${CHANNEL(channeltype)})
same => n,Set(AGENTNAME=${REPLACE(CALLERID(name),"'",)})
same => n,UnPauseQueueMember(,${MemberChanType}/${MemberChannel})
same => n,GotoIf($[${UPQMSTATUS} = UNPAUSED]?agent_unpaused,1:agent_not_found,1)

exten => agent_unpaused,1,Verbose(2,Agent paused successfully)
same => n,DBDel(PAUSECUSTOM/AGENT/${CALLERID(num)})
same => n,Set(DB(PAUSECUSTOM/AGENT/${CALLERID(num)})=Ready:${EPOCH})
;same => n,DBDel(fop2state/SIP/${CALLERID(num)})
same => n,UserEvent(FOP2ASTDB,Family: fop2state,Channel: SIP/${CALLERID(num)},Value: )
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},UNPAUSEALL)
same => n,Playback(silence/1&oml/agente-disponible)
same => n,Hangup()

exten => agent_not_found,1,Verbose(2,Agent was not found)
same => n,Playback(silence/1&oml/agente-no-campaign)

exten => 0077REMOVE,1,NoOp(agente ${CALLERID(num)} removido)
same => n,NoOp(${CALLERID(num)} removido del sistema)
same => n,NoOp(${CALLERID(num)} removido del sistema)
same => n,Hangup()


;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS     SUPERVISION DALPLAN   FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS
;  FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS FTS

[fts-sup]
exten => _001X.,1,NoOp(Channel Spy)
same => n,ChanSpy(SIP/${EXTEN:3:4},sb)
same => n,Hangup()

exten => _002X.,1,NoOp(Channel Spy and Wishper)
same => n,ChanSpy(SIP/${EXTEN:3:4},swb)
same => n,Hangup()

exten => _003X.,1,NoOp(Agent Logoff)
same => n,GotoIf($["${SIP_HEADER(supToken)}" == "abc098"]?pasa)
same => n,Hangup()
same => n(pasa),NoOp(Agente: ${EXTEN:3})
same => n,DBDel(PAUSECUSTOM/AGENT/${EXTEN:3})
same => n,DBDel(fop2state/SIP/${EXTEN:3})
same => n,Set(MemberChannel=${EXTEN:3})
same => n,Set(MemberChanType=SIP)
same => n,Set(AGENTNAME=${SIP_HEADER(nombreAgente)}) 
same => n,Set(ODBC_ID=${OMNILEADS_LOGIN_LOGOUT(${EXTEN:3})})
same => n,GotoIf($[${ODBCROWS} < 1]?no_rows,1)
same => n,Set(COUNTER=1)
same => n,While($[${COUNTER} <= ${ODBCROWS}])
same => n,Set(ARRAY(PENALTY,QUEUENAME)=${ODBC_FETCH(${ODBC_ID})})
same => n,NoOp(${QUEUENAME})
same => n,NoOp(${PENALTY})
same => n,RemoveQueueMember(${QUEUENAME},${MemberChanType}/${MemberChannel})
same => n,Set(COUNTER=${INC(COUNTER)})
same => n,EndWhile()
same => n,ODBCFinish()
same => n,QueueLog(ALL,${UNIQUEID},${AGENTNAME},REMOVEMEMBER)
same => n,Playback(silence/1&agent-loggedoff)
same => n,Hangup()

exten => _004X.,1,NoOp(Agent Pause)
same => n,GotoIf($["${SIP_HEADER(supToken)}" == "abc098"]?pasa)
same => n,Hangup()
same => n(pasa),NoOp(Agente: ${EXTEN:3})
same => n,Set(MemberChannel=${EXTEN:3})
same => n,Set(MemberChanType=SIP)
same => n,Set(PAUSETYPE=Supervisor)
same => n,PauseQueueMember(,${MemberChanType}/${MemberChannel},,${PAUSETYPE})
same => n,GotoIf($[${PQMSTATUS} = PAUSED]?agent_paused,1:agent_not_found,1)

exten => agent_paused,1,Verbose(2,Agent paused successfully)
same => n,Set(DB(PAUSECUSTOM/AGENT/${EXTEN:3})=${PAUSETYPE}:${EPOCH})
same => n,Set(DB(fop2state/SIP/${EXTEN:3})=${PAUSETYPE})
same => n,UserEvent(FOP2ASTDB,Family: fop2state,Channel: SIP/${EXTEN:3},Value: ${PAUSETYPE})
same => n,Playback(silence/1&oml/agente-pausa)
same => n,Hangup()

exten => _005X.,1,NoOp(Tomar llamada)
;same => n,ChanSpy(SIP/${EXTEN})
same => n,Hangup()

exten => _006X.,1,NoOp(Conferencia)
same => n,ChanSpy(SIP/${EXTEN},swbB)
same => n,Hangup()


exten => _007X.,1,NoOp(Agent Un-Pause)
same => n,GotoIf($["${SIP_HEADER(supToken)}" == "abc098"]?pasa)
same => n,Hangup()
same => n(pasa),NoOp(Agente: ${EXTEN:3})
same => n,Set(MemberChannel=${EXTEN:3})
same => n,Set(MemberChanType=SIP)
same => n,UnPauseQueueMember(,${MemberChanType}/${MemberChannel})
same => n,GotoIf($[${UPQMSTATUS} = UNPAUSED]?agent_unpaused,1:agent_not_found,1)

exten => agent_unpaused,1,Verbose(2,Agent paused successfully)
same => n,DBDel(PAUSECUSTOM/AGENT/${EXTEN:3})
same => n,DBDel(fop2state/SIP/${EXTEN:3})
same => n,UserEvent(FOP2ASTDB,Family: fop2state,Channel: SIP/${EXTEN:3},Value: )
same => n,Playback(silence/1&oml/agente-disponible)
same => n,Hangup()

exten => agent_not_found,1,Verbose(2,Agent was not found)
same => n,Playback(silence/1&cannot-complete-as-dialed)


[ftsCallback]
exten => s,1,Verbose(2, FTS Callback module)
same => n(callback),NoOp(${CALLERID(num)})
same => n,Playback(tt-weasels)
same => n,Playback(oml/welcomeCallback)
same => n,Read(CBOPTION,oml/callbackConf,1,,,10)
same => n,GotoIf($["${CBOPTION}" == "0"]?yesCallback)
same => n,Playback(oml/goodbye)
same => n,Hangup()
same => n(yesCallback),Playback(oml/callbacknumIs)
same => n,SayDigits(${CALLERID(num)})
same => n,Set(XCOUNT=1)
same => n,Verbose(2,Starting the loop)
same => n(top),NoOp(iteracion numero ${XCOUNT})
same => n,Read(CBNUMOPTION,oml/callbacknumConf,1,,,4)
same => n,GotoIf($["${CBNUMOPTION}" == ""]?callbacknumOk)
same => n,GotoIf($["${CBNUMOPTION}" == "0"]?enterCallbacknum)
same => n,Playback(oml/incorrectOption)
same => n,Verbose(2,Current value of X is: ${XCOUNT}) 
same => n,Set(X=${INC(XCOUNT)})
same => n,GotoIf($[${XCOUNT} <= ${ERRORCOUNT}]?top)
same => n,Verbose(2,End of the loop)
same => n,Playback(oml/goodbye)
same => n,Hangup()
same => n(callbacknumOk),AGI(oml/callbackInsert.php,${CALLERID(num)})
same => n,Playback(oml/callbackOk)
same => n,Hangup()
same => n,Set(XCOUNT=1)
same => n,Verbose(2,Starting the loop)
same => n(topEnter),NoOp(iteracion numero ${XCOUNT})
same => n(enterCallbacknum),Read(CBNUM,oml/enterCallbacknum,,,15)
same => n,Playback(oml/enteredNumIs)
same => n,SayDigits(${CBNUM})
same => n,Read(ENTEREDNUMISOK,oml/numberYes,1,,,4)
same => n,GotoIf($["${ENTEREDNUMISOK}" == "0"]?enteredCallbackNumOk)
same => n,Playback(oml/incorrectOption)
same => n,Verbose(2,Current value of X is: ${XCOUNT}) 
same => n,Set(X=${INC(XCOUNT)})
same => n,GotoIf($[${XCOUNT} <= ${ERRORCOUNT}]?topEnter)
same => n,Verbose(2,End of the loop)
same => n,Playback(oml/goodbye)
same => n,Hangup()
same => n(enteredCallbackNumOk),AGI(oml/callbackInsert.php,${CBNUM})
same => n,Playback(oml/callbacknumis)
same => n,SayNumber()
same => n,Hangup()

exten => 0,1,Verbose(2, callback)
same => n,Goto(s,1)


#exec /usr/bin/php /var/lib/asterisk/agi-bin/generate_outbound_route_context.php

; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML      LLAMADAS INTERNAS      OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML      LLAMADAS INTERNAS      OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML      LLAMADAS INTERNAS      OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML


[sub-oml-dial-internal]
; subrutina para el manejo de llamadas originadas por un Agente cuyo destino es otro Agentes o una Campaña
; ARG1 es el id del agente o id de campaña, al que se desea contactar
; ARG2 es el tipo de llamada interna

exten => s,1,Verbose(2, internal calls)
same => n,Goto(${ARG2})
same => n,Hangup()

; llamadas desde un agente hacia otro agente llamadas desde un agente hacia otro agente llamadas desde un agente hacia otro agente 
same => n(agentCall),Set(__OMLAGENTSIPCALLED=${AGENT${ARG1}SIP})
same => n,Set(__OMLAGENTSIPCALLER=${CALLERID(num)})
same => n,Set(__OMLCAMPID=${SIP_HEADER(Idcamp)})
same => n,Set(__OMLCAMPTYPE=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLCAMPQNAME=${CAMP${OMLCAMPID}QNAME})
same => n,Set(__OMLCALLTYPE=phoneJS)
same => n,Set(__OMLCALLTYPEID=7)
same => n,Set(__OMLMANUALCALLTYPEID=${SIP_HEADER(Tipocamp)})
same => n,Set(__OMLAGENTSIP=${CALLERID(num)})
same => n,Set(__OMLAGENTNAME=${CALLERID(name)})
same => n,Set(__OMLCODCLI=)
same => n,Set(__OMLAGENTID=${CUT(CALLERID(name),_,1)})
same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-2,s,1(internalAgentCallSrc))

same => n,Set(__ST=${EPOCH})   ; timestamp al momento de comenzar el dial
same => n,Set(__GM=${OMLAGENTSIP})
same => n,Set(GLOBAL(${GM})=U)    
same => n,Set(GLOBAL(${GM}ans)=0) ; timestamp de atencion de llamada en cero

same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIP})=INT CALLING:${EPOCH})
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},DIAL,${OMLAGENTSIPCALLED},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))

same => n,Dial(SIP/${OMLAGENTSIPCALLED},45,tTcU(sub-oml-internalcall-connect^internalAgentCallDst^${ST}))
same => n,Hangup()

; llamadas  desde un agente hacia una campaña llamadas  desde un agente hacia una campaña llamadas  desde un agente hacia una campaña
same => n(campCall),Verbose(2, internal agent to queue call)

same => n,Set(__OMLCAMPID=${CUT(CAMP${ARG1}QNAME,_,1)})
same => n,Set(__OMLCALLTYPE=phoneJS)
same => n,Set(__OMLCALLTYPEID=7)
same => n,Set(__OMLMANUALCALLTYPEID=${SIP_HEADER(Tipocamp)})
same => n,Set(__OMLAGENTSIP=${CALLERID(num)})
same => n,Set(__OMLAGENTNAME=${CALLERID(name)})
same => n,Set(__OMLAGENTID=${CUT(CALLERID(name),_,1)})
same => n,Set(__OMLOUTNUM=${CALLERID(num)})
same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-2,s,1(internalQueueCallSrc))

same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIP})=INT CALLING:${EPOCH})

same => n,SIPAddHeader(uidGrabacion:${UNIQUEID})
same => n,SIPAddHeader(Origin:${CAMP${OMLCAMPID}CALLACTION})
same => n,SIPAddHeader(IDCliente:${OMLCODCLI})
same => n,SIPAddHeader(IDCamp:${OMLCAMPID})
same => n,SIPAddHeader(OMLOUTNUM:${OMLAGENTSIP})
same => n,Set(__OMLUNIQUEIDCHANNEL1=${UNIQUEID})

same => n,Set(__DM=${OMLCAMPID})
same => n,Set(GLOBAL(${DM}channel)=${CHANNEL})
same => n,Set(GLOBAL(${DM}enterqueue)=${EPOCH})
same => n,Set(GLOBAL(${DM})=U)
same => n,Set(GLOBAL(${DM}ans)=0)

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},ENTERQUEUE,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-rec-check,s,1)
same => n,Set(__ARG1=internalQueueCallDst)
same => n,Queue(${CAMP${OMLCAMPID}QNAME},tT,,,${CAMP${OMLCAMPID}QTIME},,,sub-oml-internalcall-connect)
same => n,Gosub(sub-oml-hangup,s,1)


; transferencias hacia otro agente transferencias hacia otro agente transferencias hacia otro agente
; agentTransferCall
same => n(ag2agBlindTransfer),Verbose(2, transfer call ${CHANNEL} to '${ARG1}' agent)
same => n,Set(__OMLTRANSFERTYPE=ag2agBlindTransfer)
same => n,Set(__OMLAGENTSIPTRANSFERDST=${AGENT${ARG1}SIP})
same => n,Set(__OMLAGENTTRANSFERDSTID=${ARG1})
same => n,Set(__OMLCALLTYPEID=8)

same => n,Set(OMLCALLWAITDURATION=$[${GLOBAL(${DM}ans)} - ${ST}])
same => n,Set(OMLCALLDURATION=$[${EPOCH} - ${GLOBAL(${DM}ans)}])
same => n,Dial(SIP/${OMLAGENTSIPTRANSFERDST},45,tTcU(sub-oml-transfer-agent-connect^ag2agBlindTransferDst^${ARG1}^${ST}))
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${ARG1},${DIALSTATUS},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)

; transferencias consultativas hacia otro agente transferencias consultativas hacia otro agente
; agentConsultTransferCall
same => n(ag2agConsultTransfer),Verbose(2, Attended transfer call ${CHANNEL} to '${ARG1}' agent)
same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-2,s,1(ag2agConsultTransferAux))
same => n,Set(__OMLTRANSFERTYPE=ag2agConsultTransfer)
same => n,Set(__OMLAGENTSIPTRANSFERDST=${AGENT${ARG1}SIP})
same => n,Set(__OMLAGENTTRANSFERDSTID=${ARG1})
same => n,Set(__OMLCALLTYPEID=8)

same => n,Set(OMLCALLWAITDURATION=$[${GLOBAL(${DM}ans)} - ${ST}])
same => n,Set(OMLCALLDURATION=$[${EPOCH} - ${GLOBAL(${DM}ans)}])
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${GLOBAL(${DM}uniqueid)},${OMLAGENTID},CONSULT-TRANSFER,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${WD},,call,${OMLCAMPTYPE}))
same => n,Dial(SIP/${OMLAGENTSIPTRANSFERDST},45,tTcU(sub-oml-transfer-agent-connect^ag2agConsultTransferDst^${ARG1}^${ST}))
same => n,Hangup()

; transferencias hacia una campaña transferencias hacia una campaña transferencias hacia una campaña
same => n(ag2CampTransfer),Verbose(2, internal agent to queue call)
same => n,Answer()

same => n,Set(__OMLFROMCAMPID=${OMLCAMPID})
same => n,Set(__OMLFROMAGENTID=${CUT(MEMBERNAME,_,1)})
same => n,Set(__OMLCAMPID=${ARG1})
same => n,Set(__OMLCALLTYPE=transfer)
same => n,Set(__OMLCALLTYPEID=8)

same => n,SIPAddHeader(uidGrabacion:${UNIQUEID})
same => n,SIPAddHeader(Origin:${CAMP${OMLCAMPID}CALLACTION})
same => n,SIPAddHeader(IDCliente:${OMLCODCLI})
same => n,SIPAddHeader(IDCamp:${OMLCAMPID})
same => n,SIPAddHeader(OMLOUTNUM:${OMLOUTNUM})

same => n,Set(__DM=${OMLCAMPID})
same => n,Set(GLOBAL(${DM}channel)=${CHANNEL})
same => n,Set(GLOBAL(${DM}enterqueue)=${EPOCH})
same => n,Set(GLOBAL(${DM})=U)
same => n,Set(GLOBAL(${DM}ans)=0)
same => n,Set(GLOBAL(${DM}uniqueid)=${UNIQUEID})

same => n,Gosub(sub-oml-rec-check,s,1)
same => n,GotoIf($["${OMLRECTHISCALL}" != "1"]?queueLog)
same => n,GotoIf($["${OMLRECFILENAME}" != ""]?queueLog)

same => n,Gosub(sub-oml-rec-filename,s,1(${UNIQUEID},inboundCall))
same => n,MixMonitor(${OMLRECFILENAME}.wav,b,/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${OMLRECFILENAME}.wav)

same => n(queueLog),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},ENTERQUEUE-TRANS,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLFROMCAMPID},${OMLFROMAGENTID},call,${OMLCAMPTYPE}))
same => n,Queue(${CAMP${OMLCAMPID}QNAME},tTc,,,${CAMP${OMLCAMPID}QTIME},,,sub-oml-transfer-camp-connect)
same => n,Gosub(sub-oml-hangup,s,1)



; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML 		  LLAMADAS ENTRANTES          OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML 		  LLAMADAS ENTRANTES          OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML 		  LLAMADAS ENTRANTES          OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML


[sub-oml-in-check-set]
; sub-oml-in-check-set aplica a llamadas entrantes
; se reciben como parametros el id de la camp 

include => sub-oml-in-check-set-custom

exten => s,1,Verbose(2, setting some channel variables)	
; check si es announymus
;same => n,GotoIf($[${} == ""]?inCall)
;same => n,Playback(tt-weasels)
;same => n,Verbose(2, la llamada no es aceltada por OML)
;same => n,Gosub(sub-oml-hangup,s,1)

same => n(inCall),Verbose(2, Inbound Call Set Variables)
same => n,Set(__OMLOUTNUM=${CALLERID(num)})
same => n,Set(__OMLCAMPID=${ARG1})
same => n,Set(__OMLCAMPTYPE=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLCAMPQNAME=${CAMP${OMLCAMPID}QNAME})
same => n,Set(__OMLCALLTYPE=Inbound)
same => n,Set(__OMLCALLTYPEID=3)
same => n,Set(__OMLMANUALCALLTYPEID=)
same => n,Set(__OMLAGENTSIP=)
same => n,Set(__OMLAGENTID=-)
same => n,Set(__OMLAGENTNAME=-)
same => n,Set(__OMLCODCLI=)
same => n,Return()


[sub-oml-campaign-3]
; subrutine for Inbound Calls (3)

include => sub-oml-campaign-inbound-custom

exten => s,1,Verbose(2, deliver inbound call)
same => n,Answer()
same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-1,s,1(inboundCall))
same => n,SIPAddHeader(uidGrabacion:${UNIQUEID})
same => n,SIPAddHeader(Origin:${CAMP${OMLCAMPID}CALLACTION})
same => n,SIPAddHeader(IDCliente:${OMLCODCLI})
same => n,SIPAddHeader(IDCamp:${OMLCAMPID})
same => n,SIPAddHeader(OMLOUTNUM:${OMLOUTNUM})
;same => n,Set(__OMLUNIQUEIDCHANNEL1=${UNIQUEID})

same => n,Set(__DM=${OMLCAMPID})
same => n,Set(GLOBAL(${DM}channel)=${CHANNEL})
same => n,Set(GLOBAL(${DM}enterqueue)=${EPOCH})
same => n,Set(GLOBAL(${DM})=U)
same => n,Set(GLOBAL(${DM}ans)=0)
same => n,Set(GLOBAL(${DM}uniqueid)=${UNIQUEID})

same => n,Gosub(sub-oml-rec-check,s,1)
same => n,GotoIf($["${OMLRECTHISCALL}" != "1"]?queueLog)

same => n,Gosub(sub-oml-rec-filename,s,1(${UNIQUEID},inboundCall))
same => n,MixMonitor(${OMLRECFILENAME}.wav,b,/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${OMLRECFILENAME}.wav)

same => n(queueLog),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},ENTERQUEUE,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))
same => n,Queue(${CAMP${OMLCAMPID}QNAME},tTc,,,${CAMP${OMLCAMPID}QTIME},,,sub-oml-queue-inbound-connect-agent)
same => n,Gosub(sub-oml-hangup,s,1)




; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML          LLAMADAS SALIENTES         OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML          LLAMADAS SALIENTES         OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML          LLAMADAS SALIENTES         OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML

[sub-oml-out-check-set]
; sub-oml-outr-check-set aplica a llamadas salientes
; se reciben como parametros el id de la camp ${ARG1}
; check de HEADERS(phoneJS calls) y Channel Var (wd o c2c calls) para determinar el tipo de llamada/campaña
; Es invocada por: [oml-dial-out] (oml_extensions.conf)

include => sub-oml-out-check-set-custom

exten => s,1,Verbose(2, Se comrpueba si la llamada saliente es generada desde un OML Endpoint")
same => n,Verbose(2, Se setean algunas variables de canal")
same => n,GotoIf($["${SIP_HEADER(Idcamp)}" != ""]?omlphonejscall)
same => n,Verbose(2, No viene de PhoneJS, se comrpueba si es CLICK2CALL)
same => n,GotoIf($["${origin}" == "contactos" | "${origin}" == "agendas" | "${origin}" == "click2call" | "${origin}" == "calificaciones" | "${origin}" == "preview"]?click2call)
same => n,Verbose(2, Tampoco es una llamada de click2call, se comprueba si es una wd call)
same => n,GotoIf($[${WOMBAT_HOPPER_ID} != ""]?wdcall)
same => n,Verbose(2, vamos a analizar si se trata de una BLIND-TRANSFER hacia un OMLOUTNUM)
same => n,GotoIf($["${BLINDTRANSFER}" != ""]?transferOutCall)
same => n,Verbose(2, vamos a analizar si se trata de una CONSULT-TRANSFER hacia un OMLOUTNUM)
same => n,GotoIf($["${ATTENDEDTRANSFER}" != ""]?consultTransferOutCall)
same => n,Playback(tt-weasels)
same => n,Gosub(sub-oml-hangup,s,1)

same => n(omlphonejscall),Verbose(2, phoneJS call)
same => n,Set(__OMLCAMPID=${SIP_HEADER(Idcamp)})
same => n,Set(__OMLCAMPTYPE=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLCAMPQNAME=${CAMP${OMLCAMPID}QNAME})
same => n,Set(__OMLCALLTYPE=manualCall)
same => n,Set(__OMLCALLTYPEID=1)
same => n,Set(__OMLMANUALCALLTYPEID=${SIP_HEADER(Tipocamp)})
same => n,Set(__OMLAGENTSIP=${CALLERID(num)})
same => n,Set(__OMLAGENTNAME=${CALLERID(name)})
same => n,Set(__OMLCODCLI=)
same => n,Set(__OMLAGENTID=${CUT(CALLERID(name),_,1)})
same => n,Goto(return)

same => n(wdcall),Verbose(2, dialer call)
same => n,Set(__OMLCAMPID=${ID_CAMPANA})
same => n,Set(__OMLCAMPTYPE=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLCAMPQNAME=${CAMP${OMLCAMPID}QNAME})
same => n,Set(__OMLCALLTYPE=dialerCall)
same => n,Set(__OMLCALLTYPEID=2)
same => n,Set(__OMLAGENTSIP=-)
same => n,Set(__OMLAGENTNAME=-)
same => n,Set(__OMLCODCLI=${ID_CLIENTE})
same => n,Set(__OMLAGENTID=dialer-dialout)
same => n,Set(__OMLDIALERCHAN=originateChannel)
same => n,Return()

same => n(click2call),GotoIf($["${origin}" == "preview"]?preview)
same => n,Verbose(2, c2c call)
same => n,Set(__OMLCAMPID=${IdCamp})
same => n,Set(__OMLCAMPTYPE=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLCAMPQNAME=${OMLCAMPID}_${CAMPANA})
same => n,Set(__OMLCALLTYPE=manualCall)
same => n,Set(__OMLCALLTYPEID=1)
same => n,Set(__OMLMANUALCALLTYPEID=${Tipocamp})
same => n,Set(__OMLAGENTSIP=${CALLERID(num)})
same => n,Set(__OMLAGENTNAME=${CALLERID(name)})
same => n,Set(__OMLCODCLI=${codCli})
same => n,Set(__OMLAGENTID=${CUT(CALLERID(name),_,1)})
same => n,Goto(return)

same => n(preview),Verbose(2, preview call)
same => n,Set(__OMLCAMPID=${IdCamp})
same => n,Set(__OMLCAMPTYPE=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLCAMPQNAME=${OMLCAMPID}_${CAMPANA})
same => n,Set(__OMLCALLTYPE=previewCall)
same => n,Set(__OMLCALLTYPEID=4)
same => n,Set(__OMLMANUALCALLTYPEID=${Tipocamp})
same => n,Set(__OMLAGENTSIP=${CALLERID(num)})
same => n,Set(__OMLAGENTNAME=${CALLERID(name)})
same => n,Set(__OMLCODCLI=${codCli})
same => n,Goto(return)

same => n(transferOutCall),Verbose(2, transfer call)
;same => n,Set(__OMLCAMPID=${IdCamp})
;same => n,Set(__OMLCAMPQNAME=${IdCamp}_${CAMPANA})
same => n,Set(__OMLCALLTYPE=transferOutCall)
same => n,Set(__OMLCALLTYPEID=9)
;same => n,Set(__OMLMANUALCALLTYPEID=${Tipocamp})
;same => n,Set(__OMLAGENTSIP=${CALLERID(num)})
;same => n,Set(__OMLAGENTNAME=${CALLERID(name)})
same => n,Set(__OMLCODCLI=${codCli})
same => n,Goto(return)

same => n(consultTransferOutCall),Verbose(2, transfer call)
;same => n,Set(__OMLCAMPID=${IdCamp})
;same => n,Set(__OMLCAMPQNAME=${IdCamp}_${CAMPANA})
same => n,Set(__OMLCALLTYPE=consultTransferOutCall)
same => n,Set(__OMLCALLTYPEID=9)
;same => n,Set(__OMLMANUALCALLTYPEID=${Tipocamp})
;same => n,Set(__OMLAGENTSIP=${CALLERID(num)})
;same => n,Set(__OMLAGENTNAME=${CALLERID(name)})
same => n,Set(__OMLCODCLI=${codCli})
same => n,Goto(return)


same => n(return),GotoIf($["${OMLAGENTNAME}" != ""]?queuecheck)
same => n,Verbose(2, NO AGENT no tracking outbound)
same => n,Gosub(oml-hangup,s,1)
same => n(queuecheck),GotoIf($["${OMLCAMPQNAME}" != ""]?goCampContext)
same => n,Verbose(2, NO QUEUE no tracking outbound)
same => n,Gosub(sub-oml-hangup,s,1)
same => n(goCampContext),Return()


[sub-oml-campaign-1]
; esta subrutina procesa los intentos de MANUAL CALL
; Es invocada por [oml-dial-out] (oml_extensions.conf)

; Sale en busca de una ruta saliente que encamine el OMLOUTNUM

include => sub-oml-campaign-1-custom

exten => s,1,Verbose(2, Welcom to ${CONTEXT} - Subrutine for Manual Calls)
same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-2,s,1(manualCall))
; compruebo cantidad de llamadas activas concurrentes
;......
;......
;compruebo si estamos dentro de la hora establecida para llamar TC
;......
;......
;compruebo si no tengo que disparar algun AGI
;......
;......
;compruebo FLAG de ON/OFF de la campaña
;......
;......

same => n,Gosub(sub-oml-rec-check,s,1)
same => n,GotoIf($["${OMLRECTHISCALL}" != "1"]?setChanVar)

same => n,Gosub(sub-oml-rec-filename,s,1(${UNIQUEID},manualCall))
same => n,MixMonitor(${OMLRECFILENAME}.wav,b,/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${OMLRECFILENAME}.wav)

same => n(setChanVar),Set(__ST=${EPOCH})   ; timestamp al momento de comenzar el dial
same => n,Set(__GM=${OMLAGENTSIP})
same => n,Set(GLOBAL(${GM})=U)    
same => n,Set(GLOBAL(${GM}ans)=0) ; timestamp de atencion de llamada en cero
same => n,Set(GLOBAL(${GM}uniqueid)=${UNIQUEID})

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},DIAL,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))
same => n,Set(DB(PAUSECUSTOM/AGENT/${CALLERID(num)})=DIALING:${EPOCH})
same => n,Goto(oml-outr,${OMLOUTNUM},1)
same => n,Gosub(sub-oml-hangup,s,1)


[sub-oml-campaign-2]
; esta subrutina procesa los intentos de llamadas del DIALER CALLS
; la recorre los canales tipo Local/XXXXkjkajkja......;2 (es decir quien origina el Dial)
; Es invocada por [oml-dial-out] (oml_extensions.conf)

include => sub-oml-campaign-2-custom

exten => s,1,Verbose(2, ${UNIQUEID} - Welcom to ${CONTEXT} - Subrutine for Dialer Calls)
same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-3,s,1)
; compruebo si hay que grabar la llamada
; compruebo cantidad de llamadas activas concurrentes
;......
;......
;compruebo si estamos dentro de la hora establecida para llamar TC
;......
;......
;compruebo si no tengo que disparar algun AGI
;......
;......
;compruebo FLAG de ON/OFF de la campaña
;......
;......
same => n,Set(__ST=${EPOCH})
same => n,Set(__GM=dialer-dialout)
same => n,Set(GLOBAL(${GM})=U)
same => n,Set(GLOBAL(${GM}ans)=0)
same => n,Set(GLOBAL(${GM}uniqueid)=${UNIQUEID})
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},DIAL,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))
same => n,Goto(oml-outr,${OMLOUTNUM},1)


[sub-oml-campaign-2-deliver-contactcall]
; esta subrutina procesa los llamados contactados por el DIALER
; Es invocada por el DIALER, ya que es el "terminal" de WD a donde envia
; todas las llamadas conectadas de todas las campañas - Local/XXXX:..........;1 (Canal creado por el originate:context WD)

include => sub-oml-campaign-2-deliver-contactcall-custom

exten => s,1,Verbose(2, deliver dialer contact call)

same => n,Set(__DM=${OMLCAMPID})
same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-4,s,1)
same => n,Set(GLOBAL(${DM}uniqueid)=${UNIQUEID})


same => n,Set(__OMLOUTNUM=${WOMBAT_DIALING_NUMBER})
same => n,Set(__OMLCAMPID=${ID_CAMPANA})
same => n,Set(__OMLCAMPTYPE=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLCAMPQNAME=${CAMP${OMLCAMPID}QNAME})
same => n,Set(__OMLCALLTYPE=dialer)
same => n,Set(__OMLCALLTYPEID=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLCODCLI=${ID_CLIENTE})
same => n,Set(__OMLDIALERCHAN=originateContext)

same => n,Gosub(sub-oml-rec-check,s,1)
same => n,GotoIf($["${OMLRECTHISCALL}" != "1"]?durationCall)

same => n,Gosub(sub-oml-rec-filename,s,1(${UNIQUEID},dialerCall))
same => n,MixMonitor(${OMLRECFILENAME}.wav,b,/usr/local/parselog/update_mix_mixmonitor.pl ${UNIQUEID} ${OMLRECFILENAME}.wav)

same => n(durationCall),Set(GLOBAL(${DM}channel)=${CHANNEL})
same => n,Set(GLOBAL(${DM}enterqueue)=${EPOCH})
same => n,Set(GLOBAL(${DM})=U)
same => n,Set(GLOBAL(${DM}ans)=0)

same => n(headers),SIPAddHeader(uidGrabacion:${UNIQUEID})
same => n,SIPAddHeader(WombatID:${WOMBAT_HOPPER_ID})
same => n,SIPAddHeader(Origin:${CAMP${OMLCAMPID}CALLACTION})
same => n,SIPAddHeader(IDCliente:${OMLCODCLI})
same => n,SIPAddHeader(IDCamp:${OMLCAMPID})
same => n,SIPAddHeader(OMLOUTNUM:${OMLOUTNUM})
same => n,Set(CALLERID(num)=${WOMBAT_DIALING_NUMBER})
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},-,ENTERQUEUE,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))
same => n,Queue(${CAMP${OMLCAMPID}QNAME},tT,,,${CAMP${OMLCAMPID}QTIME},,,sub-oml-queue-dialer-connect-agent)


[sub-oml-campaign-4]
; esta subrutina procesa los intentos de llamadas del Preview

include => sub-oml-campaign-4-custom


[sub-oml-campaign-9]
; esta subrutina procesa los intentos de Ag2Out Blind Transfer
; Es invocada por [oml-dial-out] (oml_extensions.conf)

; Sale en busca de una ruta saliente que encamine el OMLOUTNUM

include => sub-oml-campaign-8-custom

exten => s,1,Verbose(2, Welcom to ${CONTEXT} - Subrutine for ag2OutTransfer)
; same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-2,s,1(ag2OutTransfer))
; compruebo cantidad de llamadas activas concurrentes
;......
;......
;compruebo si estamos dentro de la hora establecida para llamar TC
;......
;......
;compruebo si no tengo que disparar algun AGI
;......
;......
;compruebo FLAG de ON/OFF de la campaña
;......
;......

same => n(setChanVar),Set(__ST=${EPOCH})   ; timestamp al momento de comenzar el dial
same => n,Set(__GM=${OMLAGENTSIP})
same => n,Set(GLOBAL(${GM})=U)    
same => n,Set(GLOBAL(${GM}ans)=0) ; timestamp de atencion de llamada en cero
same => n,Set(GLOBAL(${GM}uniqueid)=${UNIQUEID})

same => n,Goto(oml-outr,${OMLOUTNUM},1)
same => n,Gosub(sub-oml-hangup,s,1)

[sub-oml-dialout]
; subrutine for dialout calls - pattern matching & trunk selection
; Es invocada por los [oml-outr-N] diferentes rutas salientes (oml_extensions_outr.conf)

include => sub-oml-dialout-custom

exten => s,1,Verbose(2, checks OK, now ready for dialout)
;same => n,ExecIf($["${OMLAGENTID}" != ""]?Verbose(2, ${OMLAGENTID}):Set(__OMLAGENTID=-))
same => n,ExecIf($["${OMLAGENTID}" == ""]?Set(OMLAGENTID=-):Verbose(2, ${OMLAGENTID}))
same => n,Verbose(2, trunk1 ${ARG1})
same => n,Verbose(2, trunk2 ${ARG2})
same => n,Verbose(2, trunk3 ${ARG3})
same => n,Verbose(2, trunk4 ${ARG4})
same => n,Verbose(2, trunk5 ${ARG5})
same => n,Verbose(2, Ringtime ${ARG6})
same => n,Verbose(2, Options ${ARG7})
same => n,GotoIf($["${OMLCALLTYPE}" == "transferOutCall"]?transferOutCall)
same => n,GotoIf($["${OMLCALLTYPE}" == "consultTransferOutCall"]?consultTransferOutCall)

; DIALOUT External Calls 
same => n,Dial(SIP/${ARG1}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-outcall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "BUSY"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "NOANSWER"]?noFailover)
same => n,Dial(SIP/${ARG2}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-outcall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "BUSY"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "NOANSWER"]?noFailover)
same => n,Dial(SIP/${ARG3}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-outcall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "BUSY"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "NOANSWER"]?noFailover)
same => n,Dial(SIP/${ARG4}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-outcall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "BUSY"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "NOANSWER"]?noFailover)
same => n,Dial(SIP/${ARG5}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-outcall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n(noFailover),Gosub(sub-oml-hangup,s,1)
; DIALOUT External Blind Transfer Calls 
same => n(transferOutCall),Dial(SIP/${ARG1}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-out-transfercall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "BUSY"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "NOANSWER"]?noFailover)
same => n,Dial(SIP/${ARG2}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-out-transfercall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "BUSY"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "NOANSWER"]?noFailover)
same => n,Dial(SIP/${ARG3}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-out-transfercall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "BUSY"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "NOANSWER"]?noFailover)
same => n,Dial(SIP/${ARG4}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-out-transfercall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "BUSY"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "NOANSWER"]?noFailover)
same => n,Dial(SIP/${ARG5}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-out-transfercall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n(noFailover),Gosub(sub-oml-hangup,s,1)
; DIALOUT External Consult Transfer Calls 
same => n(consultTransferOutCall),Verbose(2, dialout Ag2Out Consult Transfer)
same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-2,s,1(ag2agConsultTransferAux))
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${GLOBAL(${DM}uniqueid)},${OMLAGENTID},CONSULT-TRANSFER,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${WD},,call,${OMLCAMPTYPE}))
same => n,Dial(SIP/${ARG1}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-out-transfercall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "BUSY"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "NOANSWER"]?noFailover)
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${GLOBAL(${DM}uniqueid)},${OMLAGENTID},CONSULT-TRANSFER,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${WD},,call,${OMLCAMPTYPE}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "BUSY"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "NOANSWER"]?noFailover)
same => n,Dial(SIP/${ARG3}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-out-transfercall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "BUSY"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "NOANSWER"]?noFailover)
same => n,Dial(SIP/${ARG4}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-out-transfercall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "BUSY"]?noFailover)
same => n,GotoIf($["${DIALSTATUS}" == "NOANSWER"]?noFailover)
same => n,Dial(SIP/${ARG5}/${OMLOUTNUM},${ARG6},${ARG7}gM(oml-out-transfercall-connect^${UNIQUEID}^${GM}^${OMLCAMPQNAME}^${OMLAGENTNAME}^${ST}^${OMLMANUALCALLTYPEID}))
same => n,Verbose(2, Dialstatus ${DIALSTATUS})
same => n(noFailover),Gosub(sub-oml-hangup,s,1)

[sub-oml-callstatus-blacklist-omdialed]
; En caso de ser un "Falso Answer" provocado en el canal PSTN aqui se mandan los callstatus a WD
; comprobacion de blacklist
; Es invocada por [sub-oml-campaign-2-deliver-contactcall]

include => sub-oml-callstatus-blacklist-omdialed-custom

exten => s,1,Verbose(2, comprobacion de blacklist)
same => n,AGI(omni-blacklist.php,${WOMBAT_DIALING_NUMBER})
same => n,Verbose(2, resultado del blacklist: ${BLACKLIST})
same => n,GotoIf($["${BLACKLIST}" == "0"]?nexttest)
same => n,UserEvent(CALLSTATUS,Uniqueid:${UNIQUEID},V:BLACKLIST)
same => n,Hangup()
; comprobacion de oml call
same => n(nexttest),Verbose(2, comprobacion de OML Dialednum)
same => n,AGI(omni-dialednum.php,${WOMBAT_DIALING_NUMBER},${ID_CAMPANA})
same => n,Verbose(2, resultado del oml dialednum: ${OMLDIALEDNUM})
same => n,GotoIf($["${OMLDIALEDNUM}" == "0"]?return)
same => n,UserEvent(CALLSTATUS,Uniqueid:${UNIQUEID},V:OMLDIALEDNUM)
same => n,Hangup()
same => n(return),Return()


; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML         COMMON SUBRUTINES       OML OML OML OML OML OML OML OML OML OML 
; OML OML OML OML OML OML OML OML OML OML         COMMON SUBRUTINES       OML OML OML OML OML OML OML OML OML OML 
; OML OML OML OML OML OML OML OML OML OML         COMMON SUBRUTINES       OML OML OML OML OML OML OML OML OML OML 
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML

[sub-oml-queuelog]
; Subrutina para el tratamiento de todos los QueueLogs

; QueueLog(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},${OMLEVENT},data1,data2,data3,data4,data5)

; QueueLog Dialout Event-DIAL, data1-OMLOUTNUM, data2-OMLCODCLI, data3-OMLCAMPTYPEID
; QueueLog Dialout Event-ANSWER, data1-OMLOUTNUM, data2-OMLCODCLI, data3-OMLCAMPTYPEID
; QueueLog Dialout Event-COMPLETECALLER|COMPLETEAGENT, data1-OMLOUTNUM, data2-OMLCODCLI, data3-OMLCAMPTYPEID, data4-OMLRINGTIME, data4-OMLCALLTIME
; QueueLog Dialout Event-CANCEL, data1-OMLOUTNUM, data2-OMLCODCLI, data3-OMLCAMPTYPEID, data4-OMLRINGTIME
; QueueLog Dialout Event-TIMEOUT, data1-OMLOUTNUM, data2-OMLCODCLI, data3-OMLCAMPTYPEID, data4-OMLRINGTIME
; QueueLog Dialout Event-BUSY, data1-OMLOUTNUM, data2-OMLCODCLI, data3-OMLCAMPTYPEID, data4-OMLRINGTIME
; QueueLog Dialout Event-OTHER, data1-OMLOUTNUM, data2-OMLCODCLI, data3-OMLCAMPTYPEID, data4-OMLRINGTIME

; QueueLog Queue Dialer Event-ENTERQUEUE, data1-OMLOUTNUM, data5-OMLCAMPTYPEID, data6-OMLCODCLI
; QueueLog Queue Dialer Event-CONNECT, data1-OMLOUTNUM, data3-ring duration, data5-OMLCAMPTYPEID, data6-OMLCODCLI
; QueueLog Queue Dialer Event-COMPLETECALLER|COMPLETEAGENT, data1-OMLOUTNUM, data3-ring duration, data4-call duration, data5-OMLCAMPTYPEID, data6-OMLCODCLI
; QueueLog Queue Dialer Event-ABANDON, data1-OMLOUTNUM, data3-ring duration, data5-OMLCAMPTYPEID, data6-OMLCODCLI
; QueueLog Queue Dialer Event-EXPIREWITHTIMEOUT, data1-OMLOUTNUM, data3-ring duration, data5-OMLCAMPTYPEID, data6-OMLCODCLI

; QueueLog Queue Inbound Event-ENTERQUEUE, data1-OMLOUTNUM, data2-position, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]
; QueueLog Queue Inbound Event-CONNECT, data1-OMLOUTNUM, data2-position, data3-ring duration, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]
; QueueLog Queue Inbound Event-COMPLETECALLER|COMPLETEAGENT, data1-OMLOUTNUM, data2-position, data3-ring duration, data4-call duration, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]
; QueueLog Queue Inbound Event-ABANDON, data1-OMLOUTNUM, data2-position, data3-ring duration, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]
; QueueLog Queue Inbound Event-EXPIREWITHTIMEOUT, data1-OMLOUTNUM, data2-position, data3-ring duration, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]

include => sub-oml-queuelog-custom

exten => s,1,Verbose(2, Subrutine for qlog - EVENTTYPE:${ARG10})
same => n,Goto(${ARG10})

same => n(call),Verbose(2, qlog Call: ARG1->OMLCAMPID:${ARG1}, ARG2->UID:${ARG2}, ARG3->OMLAGENTID:${ARG3})
same => n,Verbose(2, qlog Call: ARG4->EVENT:${ARG4}, ARG5->OMLOUTNUM:${ARG5}, ARG6->OMLCODCLI:${ARG6})
same => n,Verbose(2, qlog Call: ARG7->OMLCALLTYPEID:${ARG7}, ARG8->WAITDURATION:${ARG8}, ARG9->CALLDURATION:${ARG9})
same => n,Verbose(2, qlog Call: ARG10->EVENTTYPE:${ARG10}, ARG11->CAMPTYPE:${ARG11})

same => n,QueueLog(${ARG1}-${ARG11}-${ARG7},${ARG2},${ARG3},${ARG4},${ARG5}|${ARG6}|${ARG8}|${ARG9}|)
same => n,Return()

same => n(pause),Verbose(2, qlog Pause: ARG1->UID:${ARG1}, ARG2->OMLAGENTID:${ARG2}, ARG3->OMLPAUSEID:${ARG3})
same => n,QueueLog(${ARG1},${ARG2},${ARG3},${ARG4},)
same => n,Return()

same => n(unpause),QueueLog(${ARG1},${ARG2},${ARG3},${ARG4},)
same => n,Return()

same => n(login),QueueLog(${ARG1},${ARG2},${ARG3},${ARG4},)
same => n,Return()

same => n(logoff),QueueLog(${ARG1},${ARG2},${ARG3},${ARG4},)
same => n,Return()

[sub-oml-rec-check]
; esta sub comprueba si la campaña tiene activo la grabacion. 
include => sub-oml-rec-check-custom

exten => s,1,Verbose(2, Welcome to ${CONTEXT} - OMLCAMPID:${ARG1} - UNIQUEIDREC:${ARG2})
same => n,GotoIf($["${CAMP${OMLCAMPID}REC}" == "0"]?return)
same => n,Set(__OMLRECTHISCALL=1)
same => n(return),Return()

[sub-oml-rec-filename]
; esta sub arma el OMLRECFILENAME para la llamada y tipo de campaña. 
include => sub-oml-rec-filename-custom

exten => s,1,Verbose(2, Welcome to ${CONTEXT} - UNIQUEIDREC:${ARG1})
same => n,GotoIf($["${ARG1}" != ""]?withUniqueidRec)
same => n,Set(UNIQUEIDREC=${UNIQUEID})
same => n(withUniqueidRec),Set(UNIQUEIDREC=${ARG1})
same => n,Goto(${ARG2})

same => n(manualCall),Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,Set(__OMLRECFILENAME=mc-${OMLCAMPID}-${STRFTIME(${EPOCH},,%Y%m%d)}-${OMLAGENTID}-${OMLOUTNUM}-${UNIQUEIDREC})
same => n,Return()

same => n(dialerCall),Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,Set(__OMLRECFILENAME=dialer-${OMLCAMPID}-${STRFTIME(${EPOCH},,%Y%m%d)}-${OMLOUTNUM}-${UNIQUEIDREC})
same => n,Return()

same => n(inboundCall),Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,Set(__OMLRECFILENAME=in-${OMLCAMPID}-${STRFTIME(${EPOCH},,%Y%m%d)}-${OMLOUTNUM}-${UNIQUEIDREC})
same => n,Return()

same => n(previewCall),Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,Set(__OMLRECFILENAME=prev-${OMLCAMPID}-${STRFTIME(${EPOCH},,%Y%m%d)}-${OMLAGENTID}-${OMLOUTNUM}-${UNIQUEIDREC})
same => n,Return()

same => n(internalCall),Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,Set(__OMLRECFILENAME=internal-${STRFTIME(${EPOCH},,%Y%m%d)}-${OMLAGENTID}-${OMLOUTNUM}-${UNIQUEIDREC})
same => n,Return()


[sub-oml-amd]
; Subrutina para detección de contestadores
include => sub-oml-amd-custom

exten => s,1,Verbose(2, AMD subrutine for camp ${ARG1})
same => n,GotoIf($["${CAMP${ARG1}AMD}" == "1"]?amd)
same => n(amd_human),Return()

same => n(amd),AMD()
same => n,NoOp(AMDSTATUS=${AMDSTATUS})
same => n,GotoIf($["${AMDSTATUS}" == "MACHINE"]?amd_machine:amd_human)

same => n(amd_machine),NoOp(es una maquina)
same => n,Set(__OMLAMD=1)
same => n,UserEvent(CALLSTATUS,Uniqueid:${UNIQUEID},V:CONTESTADOR)
same => n,Playback(${CAMP${ARG1}AMDAUDIO})
same => n,Playback(${CAMP${ARG1}AMDAUDIO})
same => n,Gosub(sub-oml-hangup)

[sub-oml-ncalls]
; Subrutina para conteo de llamadas concurrentes 
include => sub-oml-ncalls-custom


[sub-oml-hangup]
; Subrutina de ejecución de hangup
include => sub-oml-hangup-custom

exten => s,1,Verbose(2, Goodbye)
same => n,Hangup()

; Subrutina para comprobar blacklist (c2c, manual y preview) y blacklist & dialednum (dialer)
[sub-oml-blacklist]
exten => s,1,Verbose(2, OMLOUTNUM: ${ARG1}, OMLCALLTYPEID: ${ARG2}, OMLCAMPID: ${ARG3} )
same => n,GotoIf($[${ARG2} == "2"]?dialerCall)
; manual, c2c, preview
same => n(otherCall),AGI(omni-blacklist.php,${ARG1})
same => n,Verbose(2, resultado del blacklist: ${BLACKLIST})
same => n,GotoIf($["${BLACKLIST}" == "1"]?blacklist,1)
same => n,Set(BLACKLIST=0)
same => n,Return()
same => n(blacklist),Set(BLACKLIST=1)
same => n,Gosub(sub-oml-hangup)
; dialer call
same => n(dialerCall),Verbose(2, dialerCall Blacklist & Dialed number)
same => n,Verbose(2, number -${ARG1}- is in the blacklist)
same => n,AGI(omni-blacklist.php,${ARG1})
same => n,Verbose(2, blacklist result: ${BLACKLIST})
same => n,GotoIf($["${BLACKLIST}" == "1"]?blacklist,1)
same => n,Verbose(2, number -${ARG1}- was contacted previsly)
same => n,AGI(omni-dialednum.php,${ARG1},${ARG3})
same => n,Verbose(2, resultado del oml dialednum: ${OMLDIALEDNUM})
same => n,GotoIf($["${OMLDIALEDNUM}" == "1"]?falseanswer,1)
same => n,Return()

exten => falseanswer,1,Verbose(2, don't call, but insert a callstatus for WD)
same => n,Set(OMLDIALEDNUM=1)
same => n,Answer()

exten => blacklist,1,Verbose(2, is a blacklist num)
;same => n,Gosub(sub-oml-queuelog) loguar blacklist
same => n,Set(BLACKLIST=1)
same => n,Gosub(sub-oml-hangup,s,1)




; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML    BRIDGE CALL ACTIONS      OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML    BRIDGE CALL ACTIONS      OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML    BRIDGE CALL ACTIONS      OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML

[sub-oml-queue-inbound-connect-agent]
; Subrutina que se dispara cada vez que un agente atiende una llamada de cola Inbound 
; Es invocada por los canales SIP/XXXX (de agentes), cuando éstos atienden una llamada Inbound

include => sub-oml-queue-inbound-connect-agent-custom

exten => s,1,Verbose(2, voy a queueloguear que se atendio una llamada inbound)
same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-2,s,1(inboundCall))

same => n,Set(__OMLCAMPID=${SIP_HEADER(Idcamp)})
same => n,Set(__OMLCAMPTYPE=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLCAMPQNAME=${CAMP${OMLCAMPID}QNAME})
same => n,Set(__OMLCALLTYPEID=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLAGENTSIP=${MEMBERINTERFACE:4})
same => n,Set(__OMLAGENTNAME=${MEMBERNAME})
same => n,Set(__OMLCODCLI=${SIP_HEADER(IDCliente)})
same => n,Set(__OMLAGENTID=${CUT(MEMBERNAME,_,1)})
same => n,Set(__OMLOUTNUM=${SIP_HEADER(OMLOUTNUM)})
same => n,Set(GLOBAL(${DM}AGENT)=${OMLAGENTID})


same => n,Set(NOW=${EPOCH})             
same => n,Set(WD=$[${NOW} - ${GLOBAL(${DM}enterqueue)}])
same => n,Set(GLOBAL(${DM})=A)
same => n,Set(GLOBAL(${DM}ans)=${NOW})  ; se actualiza la variable ${GM}ans con el timestamp en que se atendió "el Queue dial"

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${GLOBAL(${DM}uniqueid)},${OMLAGENTID},CONNECT,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${WD},,call,${OMLCAMPTYPE}))
same => n,Set(DB(PAUSECUSTOM/AGENT/${MEMBERINTERFACE:4})=On Call:${EPOCH})
same => n,Return()

[sub-oml-queue-dialer-connect-agent]
; Subrutina que se dispara cada vez que un agente atiende una llamada de cola Dialer
; Es invocada por los canales SIP/XXXX (de agentes), cuando éstos atienden una llamada Dialer

include => sub-oml-queue-dialer-connect-agent-custom

exten => s,1,Verbose(2, voy a queueloguear que se atendio una llamada dialer)
same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-2,s,1(dialerCall))

same => n,Set(__OMLCAMPID=${SIP_HEADER(Idcamp)})
same => n,Set(__OMLCAMPTYPE=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLCAMPQNAME=${CAMP${OMLCAMPID}QNAME})
same => n,Set(__OMLCALLTYPEID=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLAGENTSIP=${MEMBERINTERFACE:4})
same => n,Set(__OMLAGENTNAME=${MEMBERNAME})
same => n,Set(__OMLCODCLI=${SIP_HEADER(IDCliente)})
same => n,Set(__OMLAGENTID=${CUT(MEMBERNAME,_,1)})
same => n,Set(__OMLOUTNUM=${SIP_HEADER(OMLOUTNUM)})
same => n,Set(OMLUNIQUEID=${GLOBAL(${DM}uniqueid)})

same => n,Set(NOW=${EPOCH})             
same => n,Set(WD=$[${NOW} - ${GLOBAL(${DM}enterqueue)}])
same => n,Set(GLOBAL(${DM})=A)
same => n,Set(GLOBAL(${DM}ans)=${NOW})  ; se actualiza la variable ${GM}ans con el timestamp en que se atendió "el dial"

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},CONNECT,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${WD},,call,${OMLCAMPTYPE}))
same => n,Set(DB(PAUSECUSTOM/AGENT/${MEMBERINTERFACE:4})=On Call:${EPOCH})
same => n,Set(__OMLQATTEND=1)
same => n,Return()

[macro-oml-outcall-connect]
; Macro ejecutada cada vez que una llamada hacia afuera de OML es atendida
; Esta macro es invocada por canales tipo: channel-1 (SIP/provider/XXXXXXXX)
; dispone de las variables: OMLCAMPID, OMLCALLTYPE, OMLCAMPQNAME, OMLOUTNUM, OMLCODCLI, OMLDIALERCHAN, OMLRECTHISCALL, OMLRECFILENAME

exten => s,1,Verbose(2, "Macro: oml-outcall-connect UNIQUEID:${ARG1} GR:${ARG2} Q:${ARG3} A:${ARG4} E:${ARG5}")
same => n,Verbose(2, soy un channel: ${CHANNEL})

same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-1,s,1(${OMLCALLTYPE}))
same => n,Set(OMLUNIQUEID=${ARG1})

same => n,ExecIf($[${OMLCALLTYPEID} == "1" | ${OMLCALLTYPEID} == "4"]?Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIP})=On Call:${EPOCH}):Verbose(2, Is a ${OMLCALLTYPEID} Call))
same => n,Set(NOW=${EPOCH})             
same => n,Set(WD=$[${NOW} - ${ARG5}])   ; el tiempo de ring es timestamp actual - el timestamp del momento del "dial"
same => n,Set(GLOBAL(${ARG2})=A)
same => n,Set(GLOBAL(${ARG2}ans)=${NOW})  ; se actualiza la variable ${GM}ans con el timestamp en que se atendió "el dial"

same => n,GotoIf($["${OMLAGENTID}" != "dialer-dialout"]?queueLog)
same => n,Gosub(sub-oml-amd,s,1(${OMLCAMPID})) ; solo si son dialer se invoca el AMD

same => n(queueLog),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},ANSWER,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${WD},,call,${OMLCAMPTYPE}))
same => n,Verbose(2, "Macro oml-outcall-connect terminating" )

[macro-oml-out-transfercall-connect]
; Macro ejecutada cada vez que una llamada transferida hacia afuera de OML es atendida
; Esta macro es invocada por canales tipo: channel-1 (SIP/provider/XXXXXXXX)
; dispone de las variables: OMLCAMPID, OMLCALLTYPE, OMLCAMPQNAME, OMLOUTNUM, OMLCODCLI, OMLDIALERCHAN, OMLRECTHISCALL, OMLRECFILENAME

exten => s,1,Verbose(2, "Macro: oml-outcall-connect UNIQUEID:${ARG1} GR:${ARG2} Q:${ARG3} A:${ARG4} E:${ARG5}")
same => n,Verbose(2, soy un channel: ${CHANNEL})

same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-1,s,1(${OMLCALLTYPE}))
same => n,Set(OMLUNIQUEID=${ARG1})

same => n,ExecIf($[${OMLCALLTYPEID} == "1" | ${OMLCALLTYPEID} == "4"]?Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIP})=On Call:${EPOCH}):Verbose(2, Is a ${OMLCALLTYPEID} Call))
same => n,Set(NOW=${EPOCH})             
same => n,Set(WD=$[${NOW} - ${ARG5}])   ; el tiempo de ring es timestamp actual - el timestamp del momento del "dial"
same => n,Set(GLOBAL(${ARG2})=A)
same => n,Set(GLOBAL(${ARG2}ans)=${NOW})  ; se actualiza la variable ${GM}ans con el timestamp en que se atendió "el dial"

same => n,GotoIf($["${OMLAGENTID}" != "dialer-dialout"]?queueLog)
same => n,Gosub(sub-oml-amd,s,1(${OMLCAMPID})) ; solo si son dialer se invoca el AMD

same => n(queueLog),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},ANSWER-TRANSFER,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${WD},,call,${OMLCAMPTYPE}))
same => n,Verbose(2, "Macro oml-outcall-connect terminating" )

[sub-oml-internalcall-connect]
; subrutina ejecutada por dos tipos de acciones: por un lado cuando se conecta una llamada desde un Dial hacia un agente
; por el otro cuando se conecta una llamada de un Queue hacia un agente 

exten => s,1,Verbose(2, internal call connect - sub-oml-internalcall-connect - Type: ${ARG1})
same => n,Goto(${ARG1})
;same => n,GotoIf($[${ISNULL(QUEUENAME)}]?internalCall)

; queue call connect
same => n(internalQueueCallDst),Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-2,s,1(internalQueueCallDst))

same => n,Set(__OMLCAMPID=${SIP_HEADER(Idcamp)})
same => n,Set(__OMLCAMPTYPE=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLCAMPQNAME=${CAMP${OMLCAMPID}QNAME})
same => n,Set(__OMLCALLTYPEID=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLAGENTSIP=${MEMBERINTERFACE:4})
same => n,Set(__OMLAGENTNAME=${MEMBERNAME})
same => n,Set(__OMLCODCLI=${SIP_HEADER(IDCliente)})
same => n,Set(__OMLAGENTID=${CUT(MEMBERNAME,_,1)})
same => n,Set(__OMLOUTNUM=${SIP_HEADER(OMLOUTNUM)})

same => n,Set(NOW=${EPOCH})             
same => n,Set(WD=$[${NOW} - ${GLOBAL(${DM}enterqueue)}])
same => n,Set(GLOBAL(${DM})=A)
same => n,Set(GLOBAL(${DM}ans)=${NOW})  ; se actualiza la variable ${GM}ans con el timestamp en que se atendió "el dial"

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},CONNECT,${OMLOUTNUM},${OMLCODCLI},9,${WD},,call,${OMLCAMPTYPE}))
same => n,Set(DB(PAUSECUSTOM/AGENT/${MEMBERINTERFACE:4})=On Int Call:${EPOCH})
same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLOUTNUM})=On Int Call:${EPOCH})
same => n,Set(__OMLQATTEND=1)
same => n,Return()

; internal call connect
same => n(internalAgentCallDst),Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-2,s,1(internalAgentCallDst))

same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIPCALLED})=On Int Call:${EPOCH})
same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIPCALLER})=On Int Call:${EPOCH})

same => n,Set(NOW=${EPOCH})             
same => n,Set(WD=$[${NOW} - ${ST}])
same => n,Set(GLOBAL(${GM})=A)
same => n,Set(GLOBAL(${GM}ans)=${NOW}) 

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},ANSWER,${OMLAGENTSIPCALLED},${OMLCODCLI},7,${WD},,call,${OMLCAMPTYPE}))
same => n,Return()


[sub-oml-transfer-agent-connect]
; subrutina ejecutada cuando se atiende una llamada transferida un Agente, desde otro Agente

exten => s,1,Verbose(${CONTEXT} id {ARG1})
same => n,Goto(${ARG1})

same => n(ag2agBlindTransferDst),Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-2,s,1(ag2agBlindTransferDst))
same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIPTRANSFERDST})=On Call:${EPOCH})
same => n,Set(__OMLAGENTSIP=${OMLAGENTSIPTRANSFERDST})
same => n,Set(__OMLAGENTID=${ARG2})
same => n,Set(__OMLCALLTYPEID=8)

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${GLOBAL(${DM}uniqueid)},${OMLAGENTID},ANSWER-TRANSFER,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${WD},,call,${OMLCAMPTYPE}))
same => n,Return()

same => n(ag2agConsultTransferDst),Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIPTRANSFERDST})=On Call:${EPOCH})
same => n,Set(__OMLAGENTSIP=${OMLAGENTSIPTRANSFERDST})
same => n,Set(__OMLAGENTID=${ARG2})
same => n,Return()

[sub-oml-transfer-camp-connect]
; subrutina ejecutada cuando se atiende una llamada transferida una canpaña, desde un Agente
; Es invocada por los canales SIP/XXXX (de agentes), cuando éstos atienden una llamada transferida

include => sub-oml-transfer-camp-connect-custom

exten => s,1,Verbose(2, voy a queueloguear que se atendio una Queue de transferencia)
same => n,Set(CHANNEL(hangup_handler_push)=sub-oml-post-call-channel-2,s,1(ag2CampTransferDst))

same => n,Set(__OMLCAMPID=${SIP_HEADER(Idcamp)})
same => n,Set(__OMLCAMPTYPE=${CAMP${OMLCAMPID}TYPE})
same => n,Set(__OMLCAMPQNAME=${CAMP${OMLCAMPID}QNAME})
same => n,Set(__OMLAGENTSIP=${MEMBERINTERFACE:4})
same => n,Set(__OMLAGENTNAME=${MEMBERNAME})
same => n,Set(__OMLCODCLI=${SIP_HEADER(IDCliente)})
same => n,Set(__OMLAGENTID=${CUT(MEMBERNAME,_,1)})
same => n,Set(__OMLOUTNUM=${SIP_HEADER(OMLOUTNUM)})
same => n,Set(__OMLCALLTYPEID=8)
same => n,Set(GLOBAL(${DM}AGENT)=${OMLAGENTID})

same => n,Set(NOW=${EPOCH})             
same => n,Set(WD=$[${NOW} - ${GLOBAL(${DM}enterqueue)}])
same => n,Set(GLOBAL(${DM})=A)
same => n,Set(GLOBAL(${DM}ans)=${NOW})  ; se actualiza la variable ${GM}ans con el timestamp en que se atendió "el Queue dial"

same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${GLOBAL(${DM}uniqueid)},${OMLAGENTID},CONNECT,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${WD},,call,${OMLCAMPTYPE}))
same => n,Set(DB(PAUSECUSTOM/AGENT/${MEMBERINTERFACE:4})=On Call:${EPOCH})
same => n,Return()



; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML         POST CALL CHANNELS DIALPLAN         OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML         POST CALL CHANNELS DIALPLAN         OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML         POST CALL CHANNELS DIALPLAN         OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML

[sub-oml-post-call-channel-1]
; Subrutina de postcall invocada por canales SIP/provider/XXXX
; ARG1 es el tipo de llamada/canal
include => sub-oml-post-call-channel-1-custom

exten => s,1,Verbose(2, Welcome to post call actions CHANNEL-1 = SIP/provider/XXXXXXX)
same => n,Goto(${ARG1})
same => n,Gosub(sub-oml-hangup,s,1)

; en la manual call, CHANNEL-1 no hace nada
same => n(manualCall),Verbose(2, CHANNEL-1 postcall manualCall)
same => n,Gosub(sub-oml-hangup,s,1)

; en las dialer call CHANNEL-1 no hace nada, salvo que haya sido un AMD entonces ahí hace un queuelog
same => n(dialerCall),Verbose(2, CHANNEL-1 postcall dialerCall)
same => n,GotoIf($["${OMLAMD}" == "1"]?dialerAMD)
same => n,Gosub(sub-oml-hangup,s,1)
same => n(dialerAMD),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},AMD,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)

; en las inbound call CHANNEL-1 postcall dispara el QueueLog RESULT
; stop mixmonitor y agi grabaciones
same => n(inboundCall),Verbose(2, CHANNEL-1 postcall inboundCall)
same => n,GotoIf($["${QUEUESTATUS}" == "TIMEOUT"]?inboundExpire)
same => n,GotoIf($["${ABANDONED}" == "TRUE"]?inboundAbandon)
same => n,Goto(inboundAttend)
; la llamada inbound expiro
same => n(inboundExpire),Verbose(2, TIMEOUT queue inbound call)
same => n,Set(OMLCALLWAITDURATION=$[${EPOCH} - ${GLOBAL(${DM}enterqueue)}])
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},EXITWITHTIMEOUT,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n,UserEvent(AgentComplete,Queue: ${OMLCAMPQNAME},TalkTime: ${CT},Channel: ${CHANNEL})
same => n,Gosub(sub-oml-hangup,s,1)
; la llamada inbound fue un abandono
same => n(inboundAbandon),Verbose(2, ABANDON queue inbound call)
same => n,Set(OMLCALLWAITDURATION=$[${EPOCH} - ${GLOBAL(${DM}enterqueue)}])
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},ABANDON,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n,UserEvent(AgentComplete,Queue: ${OMLCAMPQNAME},TalkTime: ${CT},Channel: ${CHANNEL})
same => n,Gosub(sub-oml-hangup,s,1)
; la llamada inbound fue atendida por un agente
same => n(inboundAttend),Verbose(2, llamada in atendida)
same => n,GotoIf($["${OMLRECTHISCALL}" != "1"]?queueLog)

same => n(inboundDurations),Set(OMLCALLWAITDURATION=$[${GLOBAL(${DM}ans)} - ${GLOBAL(${DM}enterqueue)}])
same => n,Set(OMLCALLDURATION=$[${EPOCH} - ${GLOBAL(${DM}ans)}])

same => n,StopMixMonitor(${OMLRECFILENAME}.wav)
same => n,AGI(omni-grabaciones.php,${OMLCALLTYPEID},${OMLCODCLI},${OMLOUTNUM},${OMLRECFILENAME}.${MONITORFORMAT},${OMLAGENTID},${OMLCAMPID},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)},${UNIQUEID},${OMLCALLDURATION})

same => n(queueLog),Set(COMPLETE=${IF($["${CAUSECOMPLETE}" = "C"]?COMPLETECALLER:COMPLETEAGENT)})
same => n,GotoIf($["${OMLCALLTYPE}" == "transfer"]?ag2CampTransfer)
same => n,GotoIf($["${OMLCALLTYPE}" == "transfer"]?ag2agBlindTransfer)
same => n,GotoIf($["${OMLCALLTYPE}" == "transferOutCall"]?ag2OutTransfer)
same => n,Goto(inboundQueueLog)
;same => n,GotoIf($["${OMLAGENTTRANSFERDSTID}" != ""]?omlAgentTransferIdVoid:omlAgentTransferId)

same => n(ag2CampTransfer),Set(OMLAGENTID=${CUT(MEMBERNAME,_,1)})
same => n,Set(OMLCALLTYPEID=8)
same => n,Goto(inboundQueueLog)

same => n(ag2agBlindTransfer),Set(OMLAGENTID=${OMLAGENTTRANSFERDSTID})
same => n,Set(OMLCALLTYPEID=8)
same => n,Goto(inboundQueueLog)

same => n(ag2OutTransfer),Verbose(2, DIALSTATUS: ${DIALSTATUS})
same => n,GotoIf($["${DIALSTATUS}" != "ANSWER"]?ag2OutTransferFail)
same => n,Set(OMLCALLTYPEID=8)
same => n,Set(OMLAGENTID=-)
same => n,Goto(inboundQueueLog)

same => n(inboundQueueLog),Set(OMLAGENTID=${CUT(MEMBERNAME,_,1)})
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},${COMPLETE},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n,UserEvent(AgentComplete,Queue: ${OMLCAMPQNAME},TalkTime: ${CT},Channel: ${CHANNEL})
same => n,Gosub(sub-oml-hangup,s,1)

same => n(ag2OutTransferFail),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},${DIALSTATUS},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n,UserEvent(AgentComplete,Queue: ${OMLCAMPQNAME},TalkTime: ${CT},Channel: ${CHANNEL})
same => n,Gosub(sub-oml-hangup,s,1)

; Preview Preview Preview Preview Call
; Preview Preview Preview Preview Call
same => n(previewCall),Verbose(2, CHANNEL-1 postcall previewCall)
same => n,AGI(omni-grabaciones.php,${OMLCALLTYPEID},${OMLCODCLI},${OMLOUTNUM},${OMLRECFILENAME}.${MONITORFORMAT},${OMLAGENTSIP},${OMLCAMPID},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)},${UNIQUEID},${CDR(billsec)})
same => n,Gosub(sub-oml-hangup,s,1)

[sub-oml-post-call-channel-2]
; Subrutina de postcall invocada por canales SIP/XXXX (canales de agente)
; El ARG1 indica el tipo de llamada/canal 
include => sub-oml-post-call-channel-2-custom

exten => s,1,Verbose(2, Welcome to post call actions CHANNEL-2 = ${CHANNEL})
same => n,Goto(${ARG1})
same => n,Gosub(sub-oml-hangup,s,1)

; en las manual call, CHANNEL-2 escribe el QueueLog Result y disparan el AGI grabaciones
same => n(manualCall),Verbose(2, CHANNEL-2 postcall manualCall)
same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIP})=Ready:${EPOCH})
same => n,Set(OMLCALLWAITDURATION=$[${GLOBAL(${GM}ans)} - ${ST}])
same => n,Set(OMLCALLDURATION=$[${EPOCH} - ${GLOBAL(${GM}ans)}])

same => n,GotoIf($["${DIALSTATUS}" == "ANSWER"]?manualCallAnswer)
same => n(queueLogManualCall),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},${DIALSTATUS},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)
same => n(manualCallAnswer),GotoIf($["${OMLRECTHISCALL}" == "1"]?agiRec)

same => n(agiRec),StopMixMonitor(${OMLRECFILENAME}.wav)
same => n,AGI(omni-grabaciones.php,${OMLCALLTYPEID},${OMLCODCLI},${OMLOUTNUM},${OMLRECFILENAME}.${MONITORFORMAT},${OMLAGENTID},${OMLCAMPID},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)},${UNIQUEID},${OMLCALLDURATION})
same => n,Set(COMPLETE=${IF($["${CAUSECOMPLETE}" = "C"]?COMPLETECALLER:COMPLETEAGENT)})
same => n(queueLogManualCall),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},${COMPLETE},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)


; en las dialer call, CHANNEL-2 actualiza el status del agente que atendio la llamada y nada más, salvo que ....
; el canal haya muerto por una transferencia, entonces se hace un QueueLog para registrar la misma
same => n(dialerCall),Verbose(2, CHANNEL-2 postcall dialerCall)
same => n,Set(__OMLUNIQUEID=${GLOBAL(${DM}uniqueid)})
same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIP})=Ready:${EPOCH})
same => n,Verbose(2, transfer ${BLINDTRANSFER})
same => n,GotoIf($["${BLINDTRANSFER}" != ""]?dialerTransfer)
same => n,Gosub(sub-oml-hangup,s,1)
same => n(dialerTransfer),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},TRANSFER,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)



; en las inbound call, CHANNEL-2 actualiza el status del agente que atendio la llamada y nada más, salvo que ....
; el canal haya muerto por una transferencia, entonces se hace un QueueLog para registrar la misma
same => n(inboundCall),Verbose(2, CHANNEL-2 postcall inboundCall)
same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIP})=Ready:${EPOCH})
same => n,Verbose(2, transfer ${BLINDTRANSFER})
same => n,GotoIf($["${BLINDTRANSFER}" != ""]?inboundTransfer)
same => n,Gosub(sub-oml-hangup,s,1)
same => n(inboundTransfer),Set(OMLCALLWAITDURATION=$[${GLOBAL(${GM}ans)} - ${ST}])
same => n,Set(OMLCALLDURATION=$[${EPOCH} - ${GLOBAL(${GM}ans)}])
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${GLOBAL(${DM}uniqueid)},${OMLAGENTID},TRANSFER,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)

; en las preview call, CHANNEL-2 no hace nada
same => n(previewCall),Verbose(2, CHANNEL-2 postcall previewCall)
same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIP})=Ready:${EPOCH})
same => n,Gosub(sub-oml-hangup,s,1)


; canal caller de una llamada de agente a agente
same => n(internalAgentCallSrc),Verbose(2, CHANNEL-2 postcall internalCaller)
same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIPCALLER})=Ready:${EPOCH})
same => n,Set(OMLCALLWAITDURATION=$[${GLOBAL(${GM}ans)} - ${ST}])
same => n,Set(OMLCALLDURATION=$[${EPOCH} - ${GLOBAL(${GM}ans)}])
same => n,GotoIf($["${DIALSTATUS}" != "ANSWER"]?noAnswer)
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},COMPLETE,${OMLAGENTSIPCALLED},${OMLCODCLI},7,${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)
same => n(noAnswer),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},${DIALSTATUS},${OMLAGENTSIPCALLED},${OMLCODCLI},7,${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)

; canal called de una llamada de agente a agente
same => n(internalAgentCallDst),Verbose(2, CHANNEL-2 postcall internalCalled)
same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIPCALLED})=Ready:${EPOCH})
same => n,Gosub(sub-oml-hangup,s,1)


; canal caller (SIP/XXXXX) de una llamada de agente a Campaña
same => n(internalQueueCallSrc),Verbose(2, CHANNEL-2 postcall internalQueueCaller)
same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIP})=Ready:${EPOCH})
same => n,GotoIf($["${QUEUESTATUS}" == "TIMEOUT"]?internalQueueSrcExpire)
same => n,GotoIf($["${ABANDONED}" == "TRUE"]?internalQueueSrcAbandon)
same => n,Goto(internalQueueSrcAttend)
; la llamada inbound expiro
same => n(internalQueueSrcExpire),Verbose(2, TIMEOUT queue internalQueueCaller call)
same => n,Set(OMLCALLWAITDURATION=$[${EPOCH} - ${GLOBAL(${DM}enterqueue)}])
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},EXITWITHTIMEOUT,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n,UserEvent(AgentComplete,Queue: ${OMLCAMPQNAME},TalkTime: ${CT},Channel: ${CHANNEL})
same => n,Gosub(sub-oml-hangup,s,1)
; la llamada inbound fue un abandono
same => n(internalQueueSrcAbandon),Verbose(2, ABANDON queue internalQueueCaller call)
same => n,Set(OMLCALLWAITDURATION=$[${EPOCH} - ${GLOBAL(${DM}enterqueue)}])
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},ABANDON,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n,UserEvent(AgentComplete,Queue: ${OMLCAMPQNAME},TalkTime: ${CT},Channel: ${CHANNEL})
same => n,Gosub(sub-oml-hangup,s,1)
; la llamada inbound fue atendida por un agente
same => n(internalQueueSrcAttend),Set(OMLAGENTID=${CUT(MEMBERNAME,_,1)})
same => n,Set(OMLCALLWAITDURATION=$[${GLOBAL(${DM}ans)} - ${GLOBAL(${DM}enterqueue)}])
same => n,Set(OMLCALLDURATION=$[${EPOCH} - ${GLOBAL(${DM}ans)}])
same => n,Set(COMPLETE=${IF($["${CAUSECOMPLETE}" = "C"]?COMPLETECALLER:COMPLETEAGENT)})
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},${COMPLETE},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)

; canal called (SIP/XXXX) de una llamada de agente a Campaña
same => n(ag2CampTransferDst),Verbose(2, CHANNEL-2 postcall ag2CampTransferDst)
same => n,Gosub(sub-oml-hangup,s,1)

; post call sobre agente que transfirió una llamada a otro agente
same => n(ag2agBlindTransferSrc),Verbose(2, CHANNEL-2 postcall transferAgent2Agent)
;same => n,Set(OMLAGENTSIPAUX=${CUT(CHANNEL,/,2})
;same => n,Set(OMLAGENTSIP=${CUT(OMLAGENTSIPAUX,-,1)})
same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIP})=Ready:${EPOCH})
same => n,Gosub(sub-oml-hangup,s,1)

; post call sobre agente que recibió una transferencia de llamada
same => n(ag2agBlindTransferDst),Verbose(2, CHANNEL-2 postcall transferAgent2Agent)
same => n,Set(OMLAGENTSIPAUX=${CUT(CHANNEL,/,2})
same => n,Set(OMLAGENTSIP=${CUT(OMLAGENTSIPAUX,-,1)})
same => n,Set(DB(PAUSECUSTOM/AGENT/${OMLAGENTSIP})=Ready:${EPOCH})
same => n,Gosub(sub-oml-hangup,s,1)

same => n(ag2agConsultTransferAux),Verbose(2, CHANNEL-2 postcall ag2agConsultTransferAux)
same => n,DumpChan
same => n,GotoIf($["${DIALSTATUS}" != "ANSWER"]?notAnswerTransfer)
same => n,GotoIf($["${RTPAUDIOQOSRTTBRIDGED}" != ""]?notBridgeTransfer)
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTTRANSFERDSTID},ANSWER-TRANSFER,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)
same => n(notBridgeTransfer),Verbose(2, transferencia no aceptada)
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},TRANSFER-DISCARD,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)
same => n(notAnswerTransfer),Verbose(2, transferencia no atendida)
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${UNIQUEID},${OMLAGENTID},${DIALSTATUS},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},,,call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)

[sub-oml-post-call-channel-3]
; Subrutina de postcall invocada por canales Local/XXXX.......;2 (WD Originate Channel)
; Por ahora solo tiene sentido en dialer ya que estos canales solamente serian generados en ese escenario
include => sub-oml-post-call-channel-3-custom

exten => s,1,Verbose(2, Welcome to post call actions CHANNEL-3 = ${CHANNEL})
same => n,Set(__OMLUNIQUEID=${GLOBAL(${GM}uniqueid)})
same => n,GotoIf($["${DIALSTATUS}" != "ANSWER"]?queueLogNoAnswer)
same => n,GotoIf($["${ANSWEREDTIME}" == ""]?hangup)

same => n,Set(OMLCALLWAITDURATION=$[${GLOBAL(${GM}ans)} - ${ST}])
same => n,Set(OMLCALLDURATION=$[${EPOCH} - ${GLOBAL(${GM}ans)}])
same => n,Set(COMPLETE=${IF($["${CAUSECOMPLETE}" = "C"]?COMPLETECALLER:COMPLETEAGENT)})
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},dialer-dialout,${COMPLETE},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)

same => n(queueLogNoAnswer),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},dialer-dialout,${DIALSTATUS},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n(hangup),Gosub(sub-oml-hangup,s,1)


[sub-oml-post-call-channel-4]
; Subrutina de postcall invocada por canales Local/XXXX.......;1 (WD Originate Context "Terminal")
; en las dialer, CHANNEL-4 cierra el QueueLog con el resultado de la Queue() y ejecuta el AGI omni-grabaciones.php

include => sub-oml-post-call-channel-4-custom

exten => s,1,Verbose(2, Welcome to post call actions CHANNEL-4: ${CHANNEL})
same => n,GotoIf($["${OMLAGENTTRANSFERDSTID}" != ""]?dialerBlindTransfer)

same => n,Set(OMLAGENTID=${CUT(MEMBERNAME,_,1)})

same => n(dialerDurations),Set(OMLCALLWAITDURATION=$[${GLOBAL(${DM}ans)} - ${GLOBAL(${DM}enterqueue)}])
same => n,Set(OMLCALLDURATION=$[${EPOCH} - ${GLOBAL(${DM}ans)}])
same => n,Set(__OMLUNIQUEID=${GLOBAL(${DM}uniqueid)})

same => n,GotoIf($["${OMLAMD}" == "1"]?dialerAmd)
same => n,GotoIf($["${QUEUESTATUS}" == "TIMEOUT"]?dialerExpire)
same => n,GotoIf($["${ABANDONED}" == "TRUE"]?dialerAbandon)
same => n,Goto(dialerAttend)
;la llamada fue descartada por AMD
same => n(dialerAmd),Verbose(2, AMD post-call)
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},-,AMD,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)
; la llamada dialer expiro
same => n(dialerExpire),Verbose(2, TIMEOUT queue dialer call)
same => n,Set(OMLCALLWAITDURATION=$[${EPOCH} - ${GLOBAL(${GM}ans)}])
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},-,EXITWITHTIMEOUT,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},,call,${OMLCAMPTYPE}))
same => n,UserEvent(AgentComplete,Queue: ${OMLCAMPQNAME},TalkTime: ${CT},Channel: ${CHANNEL})
same => n,Gosub(sub-oml-hangup,s,1)
; la llamada dialer fue un abandono
same => n(dialerAbandon),Verbose(2, ABANDON queue dialer call)
same => n,Set(OMLCALLWAITDURATION=$[${EPOCH} - ${GLOBAL(${GM}ans)}])
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},-,ABANDON,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},,call,${OMLCAMPTYPE}))
same => n,UserEvent(AgentComplete,Queue: ${OMLCAMPQNAME},TalkTime: ${CT},Channel: ${CHANNEL})
same => n,Gosub(sub-oml-hangup,s,1)
; la llamada dialer fue atendida por un agente
same => n(dialerAttend),GotoIf($["${OMLRECTHISCALL}" != "1"]?queueLog)

same => n,StopMixMonitor(${OMLRECFILENAME}.wav)
same => n,AGI(omni-grabaciones.php,${OMLCALLTYPEID},${OMLCODCLI},${OMLOUTNUM},${OMLRECFILENAME}.${MONITORFORMAT},${OMLAGENTID},${OMLCAMPID},${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)},${OMLUNIQUEID},${OMLCALLDURATION})

same => n(queueLog),Set(COMPLETE=${IF($["${CAUSECOMPLETE}" = "C"]?COMPLETECALLER:COMPLETEAGENT)}) 
same => n,Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},${COMPLETE},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCALLWAITDURATION},${OMLCALLDURATION},call,${OMLCAMPTYPE}))
same => n,Gosub(sub-oml-hangup,s,1)

same => n(dialerBlindTransfer),Set(OMLAGENTID=${OMLAGENTTRANSFERDSTID})
same => n,Goto(dialerDurations)

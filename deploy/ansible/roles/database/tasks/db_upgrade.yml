---

- name: Making backup of actual database
  postgresql_db: name={{ postgres_database }} state=dump login_user={{ postgres_user }} login_password={{ postgres_password }} owner={{ postgres_user }} login_host={{ database_fqdn }} target={{ install_prefix }}base_backup

- name: Stopping old and new postgresql services
  systemd: name=postgresql{{ prefix }}{{ item }}{{ sufix }} state=stopped
  with_items:
    - "{{ postgresql_old_version }}"
    - "{{ postgresql_version }}"

- name: Running pg_upgrade to upgrade database (centos)
  shell: '{{ pg_bin_location }}/pg_upgrade --old-datadir "{{ pg_lib_old_location }}" --new-datadir "{{ pg_lib_location }}" --old-bindir "{{ pg_bin_old_location }}" --new-bindir "{{ pg_bin_location }}"'
  args:
    chdir: "{{ pg_lib_location_no_version }}"
    executable: /bin/bash
  environment:
    PGUSER: postgres
    PGHOST: localhost
    PGPASSWORD: "{{ postgres_password }}"
  become: true
  become_user: postgres
  when: ansible_os_family == "RedHat"
#  become_args: '-s /bin/bash'

- name: Running pg_upgradecluster to update database (debian)
  shell: "{{ item }}"
  with_items:
    - pg_dropcluster {{ postgresql_version }} main --stop
    - pg_upgradecluster {{ postgresql_old_version }} main
    - pg_dropcluster {{ postgresql_old_version }} main
  environment:
    PGUSER: postgres
    PGHOST: localhost
    PGPASSWORD: "{{ postgres_password }}"
  become: true
  become_user: postgres
  when: ansible_os_family == "Debian"
# Restarteamos servicio

- name: Restart postgres service
  service: name=postgresql{{ prefix }}{{ postgresql_version }}{{ sufix }} state=restarted enabled=yes

- name: Running analyze_new_cluster.sh and delete_old_cluster.sh scripts (centos)
  shell: "{{ item }}"
  with_items:
    - ./analyze_new_cluster.sh
    - ./delete_old_cluster.sh
  args:
    chdir: "{{ pg_lib_location_no_version }}"
    executable: /bin/bash
  environment:
    PGUSER: "{{ postgres_user }}"
    PGHOST: localhost
    PGPASSWORD: "{{ postgres_password }}"
  when: ansible_os_family == "RedHat"

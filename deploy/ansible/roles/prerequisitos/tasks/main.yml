# Copyright (C) 2018 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
---

# nos aseguramos q' "omni_distribution" esté dentro de los SO permitidos.
# si no es asi, esta task generara un error

- set_fact: omni_ip="{{ ansible_all_ipv4_addresses[1] }}"
  when: desarrollo == 1
  tags: always

- set_fact: omni_ip="{{ ansible_default_ipv4.address }}"
  when: desarrollo == 0
  tags: always

- name: Print omni_distribution
  debug: msg="omni_distribution es {{ ansible_os_family }}"
  tags: always

- name: Check omni_distribution
  fail: msg="omni_distribution con valor {{ ansible_os_family }} es invalida"
  when: (
      ansible_os_family != "RedHat" and
      ansible_os_family != "Sangoma" and
      ansible_os_family != "Debian"
      )
  tags: always

# Genero el archivo omnileads.conf por default
- name: Generate omnileads.conf
  template: src=templates/omnileads.conf dest=/etc/omnileads.conf owner=root group=root mode=644
  become: true
  become_method: sudo
  tags: ['never','all']

- name: Write the new passswords in omnileads.conf
  lineinfile: path=/etc/omnileads.conf state=present regexp={{ item.regex}} line={{ item.line }}
  with_items:
    - { regex: "^POSTGRES_PASSWORD", line: "POSTGRES_PASSWORD={{ postgres_password }}" }
  when: postgres_input.user_input != ""
  register: new_password
  tags: postinstall

- shell: cat /etc/omnileads.conf |grep POSTGRES_PASSWORD |awk -F '=' '{print $2}'
  tags: postinstall
  when: postgres_input.user_input == ""
  register: pgpassword

- set_fact: postgres_password={{ pgpassword.stdout }}
#  when: pgpassword is not skipped
  when: postgres_input.user_input == ""
  tags: postinstall

# Checkeo si la base kamailio existe
- name: Check if kamailio database exists
  shell: source /etc/omnileads.conf; psql -U $POSTGRES_USER -h $POSTGRES_IP -c '\l' |grep kamailio |awk -F '|' '{print $1}'
  environment:
    PGPASSWORD: "{{ postgres_password }}"
  register: kamailiodb_exists
  tags: ['never','postinstall']
  become: true
  become_method: sudo

# tasks para cambiar el nombre de la db
- name: Stop kamailio service
  service: name=kamailio state=stopped
  when: "'kamailio' in kamailiodb_exists.stdout"
  tags: ['never','postinstall']

- name: Stop omnileads service
  service: name=omnileads state=stopped
  when: "'kamailio' in kamailiodb_exists.stdout"
  tags: ['never','postinstall']

- name: Restart postgresql service
  service: name=postgresql-9.6 state=restarted
  when: "'kamailio' in kamailiodb_exists.stdout"
  tags: ['never','postinstall']

# Se crea el usuario de postgres
- name: Create/modify omnileads postgres user
  become: yes
  become_method: sudo
  become_user: postgres
  postgresql_user: name=omnileads password={{ postgres_password }} role_attr_flags=SUPERUSER
  when: postgres_input.user_input != ""
  #when: "'kamailio' in kamailiodb_exists.stdout"
  tags: ['never','postinstall']

# Se crea el usuario de postgres
- name: Create omnileadsro postgres user
  postgresql_user: name=omnileadsro password=omnileadsro role_attr_flags=SUPERUSER
  become: yes
  become_method: sudo
  become_user: postgres
  when: "'kamailio' in kamailiodb_exists.stdout"
  tags: ['never','postinstall']

# Se cambia el nombre de la base de datos
- name: Change the database name
  shell: source /etc/omnileads.conf; psql -U postgres -h $POSTGRES_IP -c 'ALTER DATABASE kamailio RENAME TO omnileads;'
  become: true
  environment:
    PGPASSWORD: "{{ postgres_password }}"
  become_user: postgres
  become_method: sudo
  when: "'kamailio' in kamailiodb_exists.stdout"
  tags: ['never','postinstall']

# Se añaden los binarios que no van a necesitar password al hacerlos con sudo
- name: Edit sudoers to execute binaries withouth password
  lineinfile: "dest=/etc/sudoers line=\"{{ usuario }} ALL=(ALL) NOPASSWD: /usr/bin/docker, /usr/bin/sed, /usr/bin/rsync, /usr/sbin/asterisk\""
  tags: postinstall
  become: yes
  become_method: sudo

# si asterisk_etc_installed es false setea la variable asterisk_location con /opt/omnileads/asterisk
- set_fact: asterisk_location={{ install_prefix }}asterisk
  tags: always

# si si kamailio_opt_installd es false setea la variable asterisk_location con /opt/omnileads/kamailio
- set_fact: kamailio_location={{ install_prefix }}kamailio
  tags: always

# se crea el grupo de usuario omnileads
- name: Creation of {{ usuario }} group
  group: name={{ usuario }} state=present
  become: true
  become_method: sudo
  tags: yum

# se hace include de la tarea solo si ansible_os_family = Redhat
- name: Installation of Centos packages
  include: centos_installations.yml
  tags: yum
  when: ansible_os_family == "RedHat"

# se hace include de la tarea solo si ansible_os_family = Debian
- name: Installation of Debian packages
  include: debian_installations.yml
  tags: apt
  when: ansible_os_family == "Debian"

- include: roles/deploy_supervision/tasks/reboot.yml
  tags: ['reboot']

- include: setup_mariadb.yml
  tags: mariadb

# Habilitamos y empezamos redis. Redis es necesario para rtpengine y para django-defender
- name: Start and enable redis service
  service: name=redis state=restarted enabled=yes
  become: yes
  become_method: sudo
  tags: ['apt', 'yum','kamailio']

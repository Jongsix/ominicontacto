---

##########
# Checks #
##########

# Obtengo hostname del nodo
- name: Get the hostname of node
  command: hostname
  register: hostname
  when: cluster == 0
  tags: always
  changed_when: false

- name: Set ansible variables depending of hostname
  set_fact: omni_fqdn="{{ hostname.stdout }}"
  when: cluster == 0
  tags: always
- set_fact: omniapp_fqdn="{{ omni_fqdn }}"
  when: cluster == 0
  tags: always
- set_fact: asterisk_fqdn="{{ omni_fqdn }}"
  when: cluster == 0
  tags: always
- set_fact: kamailio_fqdn="{{ omni_fqdn }}"
  when: cluster == 0
  tags: always
- set_fact: database_fqdn="{{ omni_fqdn }}"
  when: cluster == 0
  tags: always
- set_fact: dialer_fqdn="{{ omni_fqdn }}"
  when: cluster == 0
  tags: always

# Obtengo IP del nodo
- name: Get IP adress of node (selfhosted)
  set_fact: omni_ip={{ hostvars[inventory_hostname]['ansible_' + iface]['ipv4']['address'] }}
  when: cluster == 0 and iface != "none"
  tags: always

# Obtengo IP publica del nodo
- name: Get public IP address of node
  shell: wget -qO- http://ipinfo.io/ip
  register: public_ip
  tags: always

- name: Validate IP public obtained
  shell: val=`echo {{ public_ip.stdout }} | awk -F "." '$0 ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}$/ && $1 <=255 && $2 <= 255 && $3 <= 255 && $4 <= 255'`; if [ ! -z $val ]; then echo 0; else echo 1; fi 
  register: ip_val
  tags: always
  failed_when: false

- fail:
    msg: "The public IP obtained is wrong, check in shell if you obtain a public IP with this command 'wget -qO- http://ipecho.net/plain | xargs echo', after that please run the script again"
  when: ip_val.stdout != '0'
  tags: always

# Comparo si la IP ingresada en el inventory es el mismo  de el nodo
- name: Compare if IP in inventory file is configured in the server
  assert:
    that: "'{{ omni_ip }}' in ansible_all_ipv4_addresses"
    msg: "The IP you inserted in inventory file is wrong, check it"
  when: cluster == 0 and iface == "none"
  changed_when: false
  tags: always

- name: Get the network/submask configured in default interface
  shell: default_if=$(ip route show | awk '/^default/ {print $5}'); route | grep $default_if|tail -1 |awk -F " " '{print $1"/"$3}'
  register: network_submask
  changed_when: false
  tags: always

# nos aseguramos q' "omni_distribution" estÃ© dentro de los SO permitidos. Si no es asi, esta task generara un error
- name: Print omni_distribution
  debug: msg="omni_distribution es {{ ansible_os_family }}"
  changed_when: false
  tags: always

- name: Check omni_distribution
  fail: msg="omni_distribution con valor {{ ansible_os_family }} es invalida"
  when: (
      ansible_os_family != "RedHat" and
      ansible_os_family != "Debian"
      )
  changed_when: false
  tags: always

# Chequeo si la version de asterisk instalada es {{ asterisk_version }}
- name: Check if Asterisk {{ asterisk_version }} is installed
  shell: asterisk -V |awk -F " " '{print $2}'
  changed_when: false
  register: asterisk_installed
  tags: ['asterisk','postinstall']

- name: Check if posgresql-{{ postgresql_version }} is installed
  shell:  bash -lc 'output=`psql -c "SELECT version()"`; if [[ $output == *"{{ postgresql_old_version }}"* ]]; then exit 2; elif [[ $output == *"{{ postgresql_version }}"* ]]; then exit 3; else exit 1; fi'
  failed_when: false
  register: postgresql_new_installed
  tags: ['database','postinstall']

# Chequeo si la version de rtpengine instalada es {{ rtpengine_version }}
- name: Check if Rtpengine-mr{{ rtpengine_version }} is installed
  shell: rtpengine -v 2>&1 |awk -F "~" '{print $2}'|cut -c 3-
  changed_when: false
  register: rtpengine_installed
  tags: kamailio

# Chequeo si la version de kamailio instalada es {{ kamailio_version }}
- name: Check if Kamailio {{ kamailio_version }} is installed
  shell: "{{ kamailio_location }}/sbin/kamailio -v |head -1 |awk -F \" \" '{print $3}'"
  changed_when: false
  register: kamailio_installed
  tags: ['kamailio','postinstall']

# Chequeo si el usuario puso sus certificados
- name: Check if trusted certificates exists
  shell: "if [ -z \"$(ls -A /var/tmp/ominicontacto-build/ominicontacto/deploy/certs)\" ]; then exit 1; else exit 0; fi"
  failed_when: false
  changed_when: false
  delegate_to: localhost
  register: trusted_certs_exists
  tags: always

- name: Check if custom and override files for dialplan exists
  shell: "[ -f {{ asterisk_location }}/etc/asterisk/oml_extensions_commonsub_custom.conf ]"
  changed_when: false
  failed_when: false
  delegate_to: localhost
  register: ast_custom_exists
  tags: always

- name: Set name of trusted certificate as ansible variable
  set_fact: "{{ item.var }}={{ item.value }}"
  with_items:
    - { var: cert, value: "{{ trusted_cert }}" }
    - { var: key, value: "{{ trusted_key }}" }
  when: trusted_key is defined and trusted_cert is defined

# Chequeo si el folder de certificado existe
- name: Check if auto-signed certificates folder exists
  shell: "[ -d {{ kamailio_location }}/etc/certs ]"
  changed_when: false
  failed_when: false
  register: certs_exists
  tags: always

- name: Check if $TZ was defined previously
  shell: bash -lc 'if [ -z $TZ ]; then exit 1; else echo $TZ; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_tz
  tags: always

- set_fact: TZ="{{ assert_tz.stdout }}"
  when: assert_tz.rc == 0 and TZ is not defined
  tags: always

- name: Check if $PGPASSWORD was defined previously
  shell: bash -lc 'if [ -z $PGPASSWORD ]; then exit 1; else echo $PGPASSWORD; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_pgpass
  tags: always

- set_fact: postgres_password="{{ assert_pgpass.stdout }}"
  when: assert_pgpass.rc == 0 and postgres_password is not defined
  tags: always

- name: Check if $DJANGO_PASS was defined previously
  shell: bash -lc 'if [ -z $DJANGO_PASS ]; then exit 1; else echo $DJANGO_PASS; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_djangopass
  tags: always

- set_fact: admin_pass="{{ assert_djangopass.stdout }}"
  when: assert_djangopass.rc == 0 and admin_pass is not defined
  tags: always

- name: Check if $SESSION_COOKIE_AGE was defined previously
  shell: bash -lc 'if [ -z $SESSION_COOKIE_AGE ]; then exit 1; else echo $SESSION_COOKIE_AGE; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_sca
  tags: always

- set_fact: SCA="{{ assert_sca.stdout }}"
  when: assert_sca.rc == 0
  tags: always

- name: Check if $EPHEMERAL_USER_TTL was defined previously
  shell: bash -lc 'if [ -z $EPHEMERAL_USER_TTL ]; then exit 1; else echo $EPHEMERAL_USER_TTL; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_ecctl
  tags: always

- set_fact: ECCTL="{{ assert_ecctl.stdout }}"
  when: assert_ecctl.rc == 0
  tags: always

- name: Check if $MONITORFORMAT was defined previously
  shell: bash -lc 'if [ -z $MONITORFORMAT ]; then exit 1; else echo $MONITORFORMAT; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_monitorformat
  tags: always

- set_fact: MONITORFORMAT="{{ assert_monitorformat.stdout }}"
  when: assert_monitorformat.rc == 0
  tags: always

- name: Check if $MYSQL_PWD was defined previously
  shell: bash -lc 'if [ -z $MYSQL_PWD ]; then exit 1; else echo $MYSQL_PWD; exit 0; fi'
  args:
    executable: /bin/bash
  changed_when: false
  failed_when: false
  register: assert_mysqlpwd
  tags: always

- set_fact: mysql_root_password="{{ assert_mysqlpwd.stdout }}"
  when: assert_mysqlpwd.rc == 0 and mysql_root_password is not defined
  tags: always

- name: Get actual mysql root password
  set_fact: mysql_old_root_password="{{ assert_mysqlpwd.stdout }}"
  when: assert_mysqlpwd.rc == 0
  tags: always

# Chequea si timezone esta definido
- name: Check if TimeZone variable is defined
  fail:
    msg: TimeZone variable undefined, edit $TZ variable in inventory file
  when: TZ is not defined and assert_tz.rc == 1
  tags: always

# Chequea si postgres_password esta definido
- name: Check if postgres password variable is defined
  fail:
    msg: Postgres password undefined, edit $postgres_password in inventory file
  when: postgres_password is not defined and assert_pgpass.rc == 1
  tags: always

# Chequea si mysql_root_password esta definido
- name: Check if MYSQL password variable is defined
  fail:
    msg: MYSQL password undefined, edit $mysql_root_password in inventory file
  when: mysql_root_password is not defined and assert_mysqlpwd.rc == 1
  tags: always

# Chequea si web admin password esta definido
- name: Check if web admin password is defined
  fail:
    msg: Web admin variable undefined, edit $admin_pass in inventory file
  when: admin_pass is not defined and assert_djangopass.rc == 1
  tags: always

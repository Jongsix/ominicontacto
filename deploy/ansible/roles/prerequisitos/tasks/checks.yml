---

##########
# Checks #
##########

# Obtengo hostname del nodo
- name: Get the hostname of node
  command: hostname
  register: hostname
  when: cluster == 0
  tags: always

# Obtengo IP del nodo
- name: Get IP adress of node (selfhosted)
  set_fact: omni_ip={{ hostvars[inventory_hostname]['ansible_' + iface]['ipv4']['address'] }}
  when: cluster == 0 and iface is defined
  tags: always

# Comparo si la IP ingresada en el inventory es el mismo  de el nodo
- name: Compare if IP in inventory file is configured in the server
  assert:
    that: "'{{ omni_ip }}' in ansible_all_ipv4_addresses"
    msg: "The IP you inserted in inventory file is wrong, check it"
  when: cluster == 0 and iface is not defined
  tags: always

# nos aseguramos q' "omni_distribution" estÃ© dentro de los SO permitidos. Si no es asi, esta task generara un error
- name: Print omni_distribution
  debug: msg="omni_distribution es {{ ansible_os_family }}"
  tags: always

- name: Check omni_distribution
  fail: msg="omni_distribution con valor {{ ansible_os_family }} es invalida"
  when: (
      ansible_os_family != "Alpine" and
      ansible_os_family != "RedHat" and
      ansible_os_family != "Debian"
      )
  tags: always

# Chequeo si la version de asterisk instalada es {{ asterisk_version }}
- name: Check if Asterisk {{ asterisk_version }} is installed
  shell: asterisk -V |awk -F " " '{print $2}'
  register: asterisk_installed
  tags: ['asterisk','postinstall']
  become: true
  become_method: sudo

# Chequeo si la version de rtpengine instalada es {{ rtpengine_version }}
- name: Check if Rtpengine-mr{{ rtpengine_version }} is installed
  shell: rtpengine -v 2>&1 |awk -F "~" '{print $2}'|cut -c 3-
  register: rtpengine_installed
  tags: kamailio
  become: true
  become_method: sudo

# Chequeo si la version de kamailio instalada es {{ kamailio_version }}
- name: Check if Kamailio {{ kamailio_version }} is installed
  shell: "{{ kamailio_location }}/sbin/kamailio -v |head -1 |awk -F \" \" '{print $3}'"
  register: kamailio_installed
  tags: ['kamailio','postinstall']
  become: true
  become_method: sudo

# Chequeo si el usuario puso sus certificados
- name: Check if trusted certificates exists
  shell: "if [ -z \"$(ls -A /var/tmp/ominicontacto-build/ominicontacto/deploy/certs)\" ]; then exit 1; else exit 0; fi"
  failed_when: false
  delegate_to: localhost
  register: trusted_certs_exists
  tags: always

- name: Set name of trusted certificate as ansible variable
  set_fact: "{{ item.var }}={{ item.value }}"
  with_items:
    - { var: cert, value: "{{ trusted_cert }}" }
    - { var: key, value: "{{ trusted_key }}" }
  when: trusted_key is defined and trusted_cert is defined

# Chequeo si el folder de certificado existe
- name: Check if auto-signed certificates folder exists
  shell: "[ -d {{ kamailio_location }}/etc/certs ]"
  failed_when: false
  register: certs_exists
  tags: always
  become: true
  become_method: sudo

# Chequeo si ics_app existe
- name: Check if ics_app is installed in server
  shell: "[-d {{ install_prefix }}ominicontacto/ics_app]"
  failed_when: false
  register: ics_exists
  tags: always

# Chequea si timezone esta definido
- name: Check if TimeZone variable is defined
  fail:
    msg: TimeZone variable undefined, edit $TZ variable in inventory file
  when: TZ is not defined

# Chequea si postgres_password esta definido
- name: Check if database password is defined
  fail:
    msg: Database variable undefined, edit $postgres_password in inventory file
  when: postgres_password is not defined

# Chequea si web admin password esta definido
- name: Check if web admin password is defined
  fail:
    msg: Web admin variable undefined, edit $admin_pass in inventory file
  when: admin_pass is not defined

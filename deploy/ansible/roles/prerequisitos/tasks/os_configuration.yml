# Copyright (C) 2018 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
---

##################################
##         Centos tasks         ##
##################################

# se deshabilita selinux https://docs.ansible.com/ansible/2.5/modules/command_module.html
- name: Disable Selinux (centos)
  command: "{{ item }}"
  with_items:
      - sed -i 's/\(^SELINUX=\).*/\SELINUX=disabled/' /etc/sysconfig/selinux
      - sed -i 's/\(^SELINUX=\).*/\SELINUX=disabled/' /etc/selinux/config
  when: ansible_os_family == "RedHat"

- name: Set environment variables for this installation
  template: src=templates/omnileads_envars.sh dest=/etc/profile.d/ mode=644 owner=root group=root
  tags: postinstall

- name: Write the /etc/hosts of server (cluster)
  blockinfile:
    path: /etc/hosts
    insertafter: EOF
    state: present
    block: |
      {{ omniapp_ip }} {{ omniapp_fqdn}}
      {{ asterisk_ip }} {{ asterisk_fqdn }}
      {{ kamailio_ip }} {{ kamailio_fqdn }}
      {{ database_ip }} {{ database_fqdn }}
      {{ dialer_ip }} {{ dialer_fqdn }}
  when: cluster != 0
  tags: changenetwork

- name: Write the /etc/hosts of server (aio)
  blockinfile:
    path: /etc/hosts
    insertafter: EOF
    state: present
    block: |
      {{ omni_ip }} {{ omni_fqdn }}
  when: cluster == 0
  tags: changenetwork

# Se añaden los binarios que no van a necesitar password al hacerlos con sudo
- name: Edit sudoers to execute binaries withouth password
  lineinfile: dest=/etc/sudoers line={{ item }}
  with_items:
    - "{{ usuario }} ALL=(ALL:ALL)  ALL"
    - "{{ usuario }} ALL=(ALL) NOPASSWD: /usr/bin/rsync, /usr/sbin/asterisk"
  become: yes
  become_method: sudo

# Se setea el timezone
- name: Set timezone of server
  timezone: name={{ TZ }}

##################################
###        Centos tasks         ##
##################################

- name: Configure yum for ansible (centos)
  ini_file: path=/etc/yum.conf section=main option="{{ item.option }}" no_extra_spaces=yes value="{{ item.value }}" state=present
  with_items:
    - { option: "sslverify", value: "0" }
    - { option: "timeout", value: "300" }
    - { option: "minrate", value: "100" }
  when: ansible_os_family == "RedHat"

# Se para y deshabilita firewalld
# https://docs.ansible.com/ansible/2.5/modules/shell_module.html#shell-module
- name: Stop firewalld (centos)
  shell: "{{ item }}"
  with_items:
      - systemctl stop firewalld
      - systemctl disable firewalld
  when: ansible_os_family == "RedHat"

- name: Install kernel-devel package (centos)
  shell: "yum install \"kernel-devel-uname-r == $(uname -r)\" -y"
  any_errors_fatal: true
  when: ansible_os_family == "RedHat"

# Update/upgrade del sistema, osea si se ejecuta como deployed - deployer
# https://docs.ansible.com/ansible/2.5/modules/yum_module.html#yum-module
- name: Update/upgrade of centos (centos)
  yum: name='*' state=latest update_cache=yes skip_broken=yes
  become: true
  become_method: sudo
  when: ansible_os_family == "RedHat"

# Se instalan paquetes basicos que se necesitan
- name: Install of dependencies (centos)
  yum: name={{ item }} state=present update_cache=yes
  with_items:
      - tftp-server
      - crontabs
      - gcc
      - cronie
      - openssl-devel
      - cronie-anacron
      - make
      - wget
      - gdb
      - which
      - vim
      - net-tools
      - gnutls-devel
      - python-devel
      - texinfo
      - kernel-headers
      - acl
  when: ansible_os_family == "RedHat"

##################################
###        Debian tasks         ##
##################################

# Se desinstala apache2 por defecto viene instalado en debian
- name: Uninstall of apache2 (debian)
  apt: name=apache2 state=absent purge=yes
  when: ansible_os_family == "Debian"

# Se añade el repositorio universe para ubuntu
- name: Add universal repository (ubuntu)
  apt_repository: repo={{ item }} state=present update_cache=yes
  with_items:
    - "deb http://archive.ubuntu.com/ubuntu/ bionic universe"
    - "deb http://archive.ubuntu.com/ubuntu/ bionic-updates universe"
    - "deb http://security.ubuntu.com/ubuntu/ bionic-security universe"
  when: ansible_distribution == "Ubuntu"

# Cuando el cluster tenga ubuntu se hace esto
- name: Add the postgresql repository key (ubuntu )
  apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc validate_certs=no state=present
  when: ansible_distribution == "Ubuntu" and cluster != 0

- name: Download postgresql-{{ postgresql_version }} repository
  apt_repository: repo="deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main" filename=pgdg state=present update_cache=yes
  when: ansible_distribution == "Ubuntu" and cluster != 0

# Se instala este paquete necesario antes de hacer update
- name: Install apt-transport-https (debian)
  apt: name=apt-transport-https state=present
  when: ansible_os_family == "Debian"

- name: Update / upgrade of system (debian)
  apt: update_cache=yes upgrade=dist
  when: ansible_os_family == "Debian"

# Instalo linux-headers del kernel  en cuestion
- name: Install linux linux-headers (debian)
  shell: "apt-get install -y linux-headers-$(uname -r)"
  when: ansible_os_family == "Debian"
  ignore_errors: True

- name: Install of dependencies (debian)
  apt: name={{ item }} state=present
  with_items:
      - build-essential
      - vim
      - net-tools
      - gcc
      - curl
      - sudo
      - wget
      - unzip
  when: ansible_os_family == "Debian"

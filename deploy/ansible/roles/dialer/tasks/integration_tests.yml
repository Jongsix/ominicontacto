---

# se instala chrome (CENTOS)
- name: Chrome 76 install (CENTOS7)
  shell: wget -P . https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm; sudo yum -y localinstall google-chrome-stable_current_x86_64.rpm; rm google-chrome-stable_current_x86_64.rpm
  become: true
  become_method: sudo
  when: ansible_os_family == "RedHat"

# se instala chrome (Ubuntu & Debian)
- name: Chrome install (Ubuntu & Debian)
  shell: wget -P . https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb; dpkg -i google-chrome-stable_current_amd64.deb; rm google-chrome-stable_current_amd64.deb;
  become: true
  become_method: sudo
  when: ansible_os_family == "Debian"

# se instala xvfb (centos)
- name: Install of xvfb (centos)
  yum: name=xorg-x11-server-Xvfb state=present update_cache=yes
  when: ansible_os_family == "RedHat"

# se instala xvfb (ubuntu & debian)
- name: Clean xvfb dependencies (Ubuntu & Debian)
  shell: apt --fix-broken -y install
  become: true
  become_method: sudo
  when: ansible_os_family == "Debian"

- name: Install of xvfb (ubuntu & debian)
  apt: name=xvfb state=present update_cache=yes
  when: ansible_os_family == "Debian"

# se descarga chromedriver
- name: chromedriver download
  shell: wget -q https://chromedriver.storage.googleapis.com/76.0.3809.68/chromedriver_linux64.zip -O temp.zip; unzip temp.zip ; rm temp.zip; chmod +755 chromedriver; mv chromedriver /usr/bin
  become: true
  become_method: su

# Se instalan los paquetes selenium y pyvirtualdisplay
- name: Install selenium & pyvirtualdisplay
  pip:
    name:
      - selenium==3.141.0
      - PyVirtualDisplay==0.2.4
    virtualenv: "{{ install_prefix }}virtualenv"
    virtualenv_command: /usr/bin/virtualenv
  environment:
    PATH: "{{ install_prefix }}virtualenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/usr/pgsql-{{ postgresql_version }}/bin"
    PYTHONPATH: '{{ install_prefix }}ominicontacto:{{ install_prefix }}local'
    PIP_DEFAULT_TIMEOUT: 100
  become: true
  become_method: su
  become_user: "{{ usuario }}"

# (pero garantizando que se ejecuten al final de toda la instalaci√≥n)
- name: OML Environment Initialization
  command: "{{ install_prefix }}bin/manage.sh inicializar_entorno"
  become: true
  become_method: su
  become_user: "{{ usuario }}"

- name: Run integration tests that not depends on real browser
  shell: "{{ install_prefix }}virtualenv/bin/python {{ install_prefix}}ominicontacto/ominicontacto_app/tests/tests.py"
  register: out
  environment:
    TESTS_INTEGRACION: True
    ADMIN_USERNAME: "{{ admin_user }}"
    ADMIN_PASSWORD: "{{ admin_pass }}"
  become: true
  become_method: su
  become_user: "{{ usuario }}"
  become_flags: '-s /bin/bash'

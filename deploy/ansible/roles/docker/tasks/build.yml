---

- name: Get the network/submask configured in default interface
  shell: default_if=$(ip route show | awk '/^default/ {print $5}'); route | grep $default_if|tail -1 |awk -F " " '{print $1"/"$3}'
  register: network_submask
  changed_when: false

# Obtengo IP publica del nodo
- name: Get public IP address of node
  shell: curl ifconfig.me
  register: public_ip
  changed_when: false

- name: Check if custom and override files for dialplan exists
  shell: "[ -f {{ asterisk_location }}/etc/asterisk/oml_extensions_commonsub_custom.conf ]"
  changed_when: false
  failed_when: false
  delegate_to: localhost
  register: ast_custom_exists
  
- name: Create directory to copy Omnileads-Docker folders
  file: path={{ item }} state=directory recurse=yes owner={{ docker_user }} group={{ docker_user }}
  with_items:
    - "{{ build_location }}/scripts"

- name: Create directories for build
  file: path={{ item }} state=directory recurse=yes owner={{ docker_user }} group={{ docker_user }}
  with_items:
    - "{{ ast_conf_location }}"
    - "{{ ast_agis_location }}"
    - "{{ ast_other_location }}"
    - "{{ kamailio_location }}"
    - "{{ nginx_location }}/conf.d"
    - "{{ omniapp_location }}/ominicontacto"

- name: Generate Dockerfiles images
  template: src=roles/docker/files/Dockerfiles/Dockerfile-{{ item }} dest={{ build_location}} owner={{ docker_user }} group={{ docker_user }}
  with_items:
    - asterisk
    - dialer
    - kamailio
    - nginx
    - omniapp
    - pbxemulator
    - postgresql
    - rtpengine

- name: Creation of asterisk build content
  include: roles/asterisk/tasks/configuration.yml
  when: prodenv == 1

- name: Upload built (rsync to /ominicontacto)
  synchronize: "src={{ build_dir }}/{{ item }} dest={{ omniapp_location }}/ominicontacto delete=yes checksum=yes times=no"
  with_items:
    - api_app
    - configuracion_telefonia_app
    - manage.py
    - ominicontacto
    - ominicontacto_app
    - ominicontacto_voip
    - reciclado_app
    - reportes_app
    - requirements
    - supervision_app
    - test
    - tests
    - utiles_globales.py
  become: true
  become_method: su
  become_user: "{{ docker_user }}"
  when: prodenv == 1

- name: Copy of Dockerfiles content
  copy: src={{ item.src }} dest={{ item.dest }}/ owner={{ docker_user }} group={{ docker_user }}
  with_items:
    - { src: /var/tmp/ansible/roles/docker/files/pbxemulator-files, dest: "{{ build_location }}" }
    - { src: "{{ repo_location }}/requirements", dest: "{{ build_location }}" }
    - { src: "{{ repo_location }}/ominicontacto_voip/kamailio-files/kamailio.cfg", dest: "{{ kamailio_location }}" }

- name: Generate Dockerfiles content
  template: src={{ item.src }} dest={{ item.dest }} mode=755 owner={{ docker_user }} group={{ docker_user }}
  with_items:
    - { src: roles/docker/files/scripts/build-asterisk.sh, dest: "{{ build_location }}/scripts" }
    - { src: roles/docker/files/scripts/create_language.sh, dest: "{{ build_location }}/scripts" }
    - { src: roles/oml_server/templates/pip.conf, dest: "{{ build_location }}/scripts" }
    - { src: roles/oml_server/templates/requirements.txt, dest: "{{ build_location }}/scripts" }
    - { src: roles/docker/files/scripts/run_asterisk.sh, dest: "{{ build_location }}/scripts" }
    - { src: roles/docker/files/scripts/run_rtpengine.sh, dest: "{{ build_location }}/scripts" }
    - { src: roles/docker/files/scripts/run_omniapp.sh, dest: "{{ omniapp_location }}/run_omniapp.sh"}
    - { src: roles/omniapp_second/templates/bin/conversor.sh, dest: "{{ omniapp_location }}" }
    - { src: roles/omniapp_second/templates/run/oml_uwsgi.ini, dest: "{{ omniapp_location }}/oml_uwsgi.ini"}
    - { src: roles/omniapp_second/templates/etc/ominicontacto.conf, dest: "{{ nginx_location }}/conf.d"}
    - { src: roles/omniapp_second/templates/etc/nginx.conf.j2, dest: "{{ nginx_location }}/nginx.conf"}
    - { src: roles/docker/files/scripts/mime.types, dest: "{{ nginx_location }}/mime.types"}
    - { src: roles/kamailio/templates/etc/kamailio-local.cfg, dest: "{{ kamailio_location }}" }

- name: Log into DockerHub
  docker_login:
    username: "{{ docker_login_user }}"
    password: "{{ docker_login_pass }}"
    email: "{{ docker_login_email }}"

- name: Build images for PE and DE
  docker_image: 
    build:
        path: "{{ build_location }}"
        dockerfile: Dockerfile-{{ item.dockerfile }}
        pull: yes
    name: "freetechsolutions/{{ item.image }}"
    source: build
    tag: "{{ item.version }}"
    force_source: yes
    force_tag: yes 
    push: yes
  with_items:
    - { dockerfile: "asterisk", image: "asterisk", version: "{{ asterisk_version }}" }
    - { dockerfile: "dialer", image: "dialer", version: "{{ wombat_version }}" }
    - { dockerfile: "omniapp", image: "omniapp", version: "{{ version }}" }
    - { dockerfile: "postgresql", image: "postgresql", version: "{{ postgresql_version }}" }
    - { dockerfile: "rtpengine", image: "rtpengine", version: "{{ rtpengine_version }}" }

- name: Build {{ version }} images (PE)
  docker_image: 
    build:
        path: "{{ build_location }}"
        dockerfile: Dockerfile-{{ item.dockerfile }}
        pull: yes
    name: "freetechsolutions/{{ item.image }}"
    source: build
    tag: "{{ item.version }}"
    force_source: yes
    force_tag: yes 
    push: yes  
  with_items:
    - { dockerfile: "kamailio", image: "kamailio", version: "{{ version }}" }
    - { dockerfile: "nginx", image: "nginx", version: "{{ version }}" }
  when: prodenv == 1

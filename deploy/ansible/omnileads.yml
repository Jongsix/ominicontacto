# Copyright (C) 2018 Freetech Solutions

# This file is part of OMniLeads

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
# Playbook de instalacion de Omnileads sin Docker osea si DOCKER=false en el archivo hosts
# Utilza como variables de entorno el archivo group_vars/all y el archivo de inventario hosts
# Utiliza como archivo de configuracion /var/tmp/ansible/ansible.cfg
# Cositas a tener en cuenta:
# https://docs.ansible.com/ansible/2.5/user_guide/playbooks_conditionals.html
# https://docs.ansible.com/ansible/2.5/user_guide/playbooks_loops.html
# https://docs.ansible.com/ansible/2.4/intro_configuration.html
---
# hosts: le decimos que seccion del hosts se va  usar: [omnileads]
- name: Instalacion de Omnileads
  hosts: omnileads
# variables que vienen exportadas desde el deploy.sh
  vars:
          build_dir: "{{ BUILD_DIR }}"
          rama: "{{ RAMA }}"

# se piden las variables de superuser y el formato de conversion
# https://docs.ansible.com/ansible/2.6/user_guide/playbooks_prompts.html
  vars_prompt:
    #  - name: "admin_pass"
    #    prompt: "Ingrese contraseña del admin de Omnileads (contraseña con números, letras y caracteres especiales) default: OML3.1415 "
    #    private: yes
    #    default: OML3.1415

    #  - name: "admin_pass2"
    #    prompt: "Ingrese nuevamente contrasena del admin de Omnileads: "
    #    private: yes
    #    default: OML3.1415

    #  - name: "postgres_password"
    #    prompt: "Ingrese contrasena de la base de datos postgresql: "
    #    private: yes

      - name: "formato_conversion"
        prompt: "Ingrese el formato de conversión de grabaciones (wav o mp3, default mp3): "
        default: mp3
        private: no

# los pre_tasks son para validaciones de los inputs de los usuarios
  pre_tasks:

    ## Contraseñas de admin

      - pause:
          prompt: "Ingrese contraseña del admin de Omnileads (contraseña con números, letras y caracteres especiales) default: OML3.1415 "
          echo: no
        register: admin_input
        tags: ['never', 'all']

      - set_fact: admin_pass="OML3.1415"
        when: admin_input.user_input == ""
        tags: ['never', 'all']

      - pause:
          prompt: "Ingrese contraseña de admin de omnileads (minimo 8 caracteres, dejar en blanco si quiere preservar la contrasena que ha sido seteada anteriormente) "
          echo: no
        register: admin_input
        tags: ['never','postinstall']

      - set_fact: admin_pass={{ admin_input.user_input }}
        when: admin_input.user_input != ""
        tags: postinstall

      - pause:
          prompt: "Ingrese nuevamente contraseña del admin de Omnileads: "
          echo: no
        register: admin_input2
        when: admin_input.user_input != ""
        tags: postinstall

      - set_fact: admin_pass2={{ admin_pass }}
        when: admin_input.user_input == ""
        tags: postinstall
  #      tags: ['never', 'all']

      - set_fact: admin_pass2={{ admin_input2.user_input }}
        when: admin_input.user_input != ""
        tags: postinstall

    ## Contraseña de postgresql

      - pause:
          prompt: "Ingrese contraseña de base de datos postgresql, default: omnileadsrw "
          echo: no
        register: postgres_input
        tags: ['never', 'all']

      - set_fact: postgres_password="omnileadsrw"
        when: postgres_input.user_input == ""
        tags: ['never', 'all']

      - pause:
          prompt: "Ingrese contraseña de base de datos postgresql (minimo 8 caracteres, dejar en blanco si quiere preservar la contrasena que ha sido seteada anteriormente) "
          echo: no
        register: postgres_input
        tags: ['never','postinstall']

      - set_fact: postgres_password={{ postgres_input.user_input }}
        when: postgres_input.user_input != ""
        tags: postinstall

      - assert:
          that:
            - "'{{ admin_pass }}' | length >= 8"
            - "'{{ postgres_password }}' | length >= 8"
          msg: "La contraseñas ingresadas son demasiado cortas"
          when: admin_input.user_input != "" or desarrollo == 0

      - assert:
          that: "'{{ admin_pass }}' == '{{ admin_pass2 }}'"
          msg: "Las contraseñas no son iguales"
        tags: postinstall
        when: desarrollo == 0

      - assert:
          that: "'{{ formato_conversion }}' == 'wav' or '{{ formato_conversion }}' == 'mp3' "
          msg: "Formato inválido"
        tags: postinstall
        when: desarrollo == 0

# el gather_facts es para obtener valores de variables predeterminadas de ansible, la mas usada es ansible_os_family.
# Esta variable te dice que familia de OS es el servidor a deployar (Debian o RedHat)

  gather_facts: True

# Aca comienza la ejecucion de tasks. Las tasks se agrupan en roles, los roles se agrupan dependiendo del componente del sistema
# https://docs.ansible.com/ansible/2.5/user_guide/playbooks_reuse_roles.html
  roles:
          - {role: prerequisitos, tags: ['yum']}
          - {role: oml_server, tags: ['virtualenv']}
          - asterisk
          - kamailio
          - omniapp_second
          - deploy_supervision
